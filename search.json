[{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to AMPH Forecast Suite","title":"Contributing to AMPH Forecast Suite","text":"Thank interest contributing AMPH Forecast Suite! welcome contributions community.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How to Contribute","what":"Reporting Bugs","title":"Contributing to AMPH Forecast Suite","text":"find bug, please open issue GitHub : - clear description bug - Steps reproduce behavior - Expected behavior - R version operating system","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"suggesting-enhancements","dir":"","previous_headings":"How to Contribute","what":"Suggesting Enhancements","title":"Contributing to AMPH Forecast Suite","text":"welcome suggestions new features enhancements. Please open issue : - clear description enhancement - useful - Example use cases","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"How to Contribute","what":"Pull Requests","title":"Contributing to AMPH Forecast Suite","text":"Fork repository Create new branch feature (git checkout -b feature/AmazingFeature) Make changes Add tests changes Update documentation needed Commit changes (git commit -m 'Add AmazingFeature') Push branch (git push origin feature/AmazingFeature) Open Pull Request","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"How to Contribute","what":"Code Style","title":"Contributing to AMPH Forecast Suite","text":"Follow tidyverse style guide Use roxygen2 documentation Include examples function documentation Write tests new functions","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"How to Contribute","what":"Documentation","title":"Contributing to AMPH Forecast Suite","text":"Update README.md change functionality Update NEWS.md changes Ensure functions proper roxygen2 documentation Update vignettes adding major new features","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"development-setup","dir":"","previous_headings":"","what":"Development Setup","title":"Contributing to AMPH Forecast Suite","text":"Clone repository Install development dependencies: Load package development: Run tests: Build documentation:","code":"install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\", \"rmarkdown\")) devtools::load_all() devtools::test() devtools::document()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions?","title":"Contributing to AMPH Forecast Suite","text":"Feel free open issue questions contributing.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"set-parameters","dir":"Articles","previous_headings":"","what":"Set parameters","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"","code":"state_name <- \"Maryland\" geo_ids <- \"md\" forecast_disease <- \"influenza\" forecast_date = \"2024-11-30\" #\"2025-10-12\""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"save-and-check-api-key","dir":"Articles","previous_headings":"","what":"Save and check API key","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"Go https://api.delphi.cmu.edu/epidata/admin/registration_form register psuedo-anonymous account. Run command save API key .Renviron file. says prompt, add line DELPHI_EPIDATA_KEY=yourkeyhere .Renviron file. Save close file, restart R RStudio. restarting, run command epidatr::get_api_key() check API key saved.","code":"# Follow instructions about opening `.Renviron` file epidatr::save_api_key()  # Check that the API key is saved epidatr::get_api_key()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"pull-nhsn-hospitalization-data","dir":"Articles","previous_headings":"","what":"Pull NHSN hospitalization data","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"","code":"target_data <- get_nhsn_data(   disease = forecast_disease, #\"influenza\"  or \"rsv\" or \"covid\"   geo_values = geo_ids,   forecast_date = forecast_date,   save_data = TRUE ) ## Important: forecast_date is more than 1 week ago. Pulling data issued prior to forecast_date. ## Pulling data issued on or before 2024-11-30 ## Warning: No API key found. You will be limited to non-complex queries and encounter rate ## limits if you proceed. ## ℹ See `?save_api_key()` for details on obtaining and setting API keys. ## This warning is displayed once every 8 hours."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"or-pull-directly-with-epidatr","dir":"Articles","previous_headings":"","what":"Or pull directly with epidatr","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"Note: pull data directly pertains previous forecast date, need filter issue date. code set , pull recent data. pull data previous forecast date, use get_nhsn_data() function .","code":"# Map disease names to NHSN signal names # Based on epidatr NHSN signals for respiratory diseases signal_map <- list(   \"influenza\" = \"confirmed_admissions_flu_ew\",   \"covid\" = \"confirmed_admissions_covid_ew\",   \"rsv\" = \"confirmed_admissions_rsv_ew\" ) signal <- signal_map[[forecast_disease]]  # Call epidatr to get the data target_data <- epidatr::pub_covidcast(   source = \"nhsn\",   signals = signal,   geo_type = \"state\",   time_type = \"week\",   geo_values = tolower(geo_ids) )  target_data <- target_data %>%   dplyr::filter(time_value >= lubridate::as_date(\"2020-09-01\"),                 time_value < lubridate::as_date(forecast_date)) %>%   dplyr::mutate(disease = forecast_disease, signal = signal) %>%   dplyr::select(geo_value, source, disease, signal, issue_date = issue, time_value, value)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"check-the-data","dir":"Articles","previous_headings":"Or pull directly with epidatr","what":"Check the data","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"","code":"ggplot(target_data, aes(x = time_value, y = value)) +   geom_line() +   facet_wrap(~toupper(geo_value), scales = \"free_y\") +   labs(title = paste(\"NHSN Hospital Admissions\"),        x = NULL,        y = \"Weekly hospital admissions (n)\",        alt = \"Line plot of weekly hospital admissions over time\") +   theme_bw() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/collect_empirical_data.html","id":"save-it","dir":"Articles","previous_headings":"Or pull directly with epidatr","what":"Save it","title":"AMPH 2025: Pull NHSN Hospitalization Data for Forecasting","text":"","code":"write_csv(target_data, file = file.path(\"target-data\", paste0(\"target-hospital-admissions-\", forecast_date, \".csv\")))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"convert-data-between-formats","dir":"Articles","previous_headings":"","what":"Convert Data Between Formats","title":"Converting File Types","text":"package provides helper functions convert data hub format various forecasting package formats:","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"hub-fabletsibble","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ Fable/tsibble","title":"Converting File Types","text":"Convert hub data tsibble fable modeling","code":"library(AMPHForecastSuite) ## Loading required package: gitcreds ## Loading required package: jsonlite ## Loading required package: remotes ## Loading required package: scales ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.1     ✔ stringr   1.5.2 ## ✔ ggplot2   4.0.0     ✔ tibble    3.3.0 ## ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 ## ✔ purrr     1.1.0      ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ readr::col_factor() masks scales::col_factor() ## ✖ purrr::discard()    masks scales::discard() ## ✖ dplyr::filter()     masks stats::filter() ## ✖ purrr::flatten()    masks jsonlite::flatten() ## ✖ dplyr::lag()        masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors ## Registered S3 method overwritten by 'tsibble': ##   method               from  ##   as_tibble.grouped_df dplyr ##  ## Registered S3 method overwritten by 'epipredict': ##   method            from    ##   print.step_naomit recipes hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 20),   location = \"US\",   value = rnorm(20, 100, 10) )  # Convert to tsibble format ts_data <- convert_hub_to_tsibble(hub_data)  # Use with fable library(fable) ## Loading required package: fabletools library(tsibble) ##  ## Attaching package: 'tsibble' ##  ## The following object is masked from 'package:lubridate': ##  ##     interval ##  ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, union model <- ts_data %>%    model(arima = ARIMA(value)) ## Warning: 1 error encountered for arima ## [1] The `feasts` package must be installed to use this functionality. It can be installed with install.packages(\"feasts\") # Convert fable forecasts back to hub format forecasts <- model %>% forecast(h = 4) hub_forecasts <- convert_fable_to_hub(forecasts, location = \"US\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"hub-epiestim","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ EpiEstim","title":"Converting File Types","text":"","code":"# Prepare data for EpiEstim epiestim_data <- convert_hub_to_epiestim(   hub_data,    location_filter = \"US\" )  # Run EpiEstim (example) library(EpiEstim) res <- estimate_R(epiestim_data, method = \"parametric_si\",                   config = make_config(list(mean_si = 7, std_si = 4.5)))  # Convert results back to hub format hub_r_estimates <- convert_epiestim_to_hub(res, location = \"US\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"hub-epinow2","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ EpiNow2","title":"Converting File Types","text":"","code":"# Prepare data for EpiNow2 epinow2_data <- convert_hub_to_epinow2(   hub_data,   location_filter = \"US\" )  # Run EpiNow2 (example) library(EpiNow2) res <- epinow(   reported_cases = epinow2_data,   generation_time = generation_time_opts(Generation_Time_Opts(...)),   delays = delay_opts(Delay_Opts(...)) )  # Convert results back to hub format hub_forecasts <- convert_epinow2_to_hub(res, location = \"US\")"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"converting-to-fable-format","dir":"Articles","previous_headings":"Working with Hub Data","what":"Converting to Fable Format","title":"Converting File Types","text":"package makes easy convert hub-formatted data work fable forecasting package:","code":"library(AMPHForecastSuite)  # Create sample hub data hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 20),   location = \"US\",   value = rnorm(20, 100, 10) )  # Convert to tsibble format for fable ts_data <- convert_hub_to_tsibble(hub_data) print(ts_data)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"using-fable-for-forecasting","dir":"Articles","previous_headings":"Working with Hub Data","what":"Using Fable for Forecasting","title":"Converting File Types","text":"data tsibble format, can use fable forecasting:","code":"library(fable) library(tsibble)  # Fit a model model <- ts_data %>%    model(     arima = ARIMA(value),     ets = ETS(value)   )  # Generate forecasts forecasts <- model %>% forecast(h = 4)  # Convert back to hub format hub_forecasts <- convert_fable_to_hub(forecasts, location = \"US\", target = \"inc\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"working-with-epiestim","dir":"Articles","previous_headings":"","what":"Working with EpiEstim","title":"Converting File Types","text":"EpiEstim used estimate time-varying reproduction numbers:","code":"library(EpiEstim)  # Prepare daily case data hub_data_daily <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) )  # Convert to EpiEstim format epiestim_data <- convert_hub_to_epiestim(hub_data_daily, location_filter = \"US\")  # Estimate R res <- estimate_R(   epiestim_data,    method = \"parametric_si\",   config = make_config(list(mean_si = 7, std_si = 4.5)) )  # Convert results back to hub format hub_r_estimates <- convert_epiestim_to_hub(res, location = \"US\") print(hub_r_estimates)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/convert_file_types.html","id":"working-with-epinow2","dir":"Articles","previous_headings":"","what":"Working with EpiNow2","title":"Converting File Types","text":"EpiNow2 provides sophisticated estimation forecasting delay distributions:","code":"library(EpiNow2)  # Prepare data for EpiNow2 epinow2_data <- convert_hub_to_epinow2(hub_data_daily, location_filter = \"US\")  # Run EpiNow2 (simplified example) # Note: You would need to specify generation time and delay distributions res <- epinow(   reported_cases = epinow2_data,   generation_time = generation_time_opts(     Generation_Time_Opts(mean = 5, sd = 2)   ),   delays = delay_opts(     Delay_Opts(mean = 3, sd = 1)   ) )  # Convert results back to hub format hub_forecasts <- convert_epinow2_to_hub(res, location = \"US\") print(hub_forecasts)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with AMPH Forecast Suite","text":"AMPH Forecast Suite provides comprehensive toolkit building infectious disease forecasting pipelines hubs. vignette demonstrates basic workflow using package.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with AMPH Forecast Suite","text":"First, ensure R (version 4.0 higher) RStudio installed. Next, set git credentials, already done . Next, install AMPH Forecast Suite CRAN GitHub: Next, install required forecasting packages: can also selectively install specific categories:","code":"# Check R version R.Version()$version.string #> [1] \"R version 4.5.1 (2025-06-13)\" # Check RStudio version # RStudio.Version()$version # Set your git credentials (replace with your actual info) install.packages(\"gitcreds\")  gitcreds::gitcreds_set(   username = \"your_github_username\",   password = \"your_github_token\" ) # Install remotes if you haven't already install.packages(\"remotes\")  # Install AMPH Forecast Suite remotes::install_github(\"ACCIDDA/AMPH_Forecast_Suite\") library(AMPHForecastSuite)  # Install all forecasting packages install_forecast_packages() # Install only hubverse and forecasting packages install_forecast_packages(   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = FALSE,   install_data = FALSE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/getting-started.html","id":"setting-up-directory-structure","dir":"Articles","previous_headings":"","what":"Setting Up Directory Structure","title":"Getting Started with AMPH Forecast Suite","text":"Set directory structure forecasting project:","code":"# Create project directory and subdirectories # this sets the working directory to the new project directory setup_file_structure(project_dir = \"My_Forecast_Project\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/getting-started.html","id":"building-a-complete-pipeline","dir":"Articles","previous_headings":"","what":"Building a Complete Pipeline","title":"Getting Started with AMPH Forecast Suite","text":"’s example complete forecasting pipeline:","code":"# 1. Load data in hub format hub_data <- load_hub_data()  # Your data loading function  # 2. Generate forecasts with multiple methods # Method 1: Fable ts_data <- convert_hub_to_tsibble(hub_data) fable_model <- ts_data %>% model(ARIMA(value)) fable_fc <- fable_model %>% forecast(h = 4) fable_hub_fc <- convert_fable_to_hub(fable_fc, location = \"US\")  # Method 2: EpiEstim for R estimates epiestim_data <- convert_hub_to_epiestim(hub_data, location_filter = \"US\") r_estimates <- estimate_R(epiestim_data, method = \"parametric_si\",                           config = make_config(list(mean_si = 7, std_si = 4.5))) r_hub <- convert_epiestim_to_hub(r_estimates, location = \"US\")  # 3. Combine forecasts all_forecasts <- rbind(fable_hub_fc, r_hub)  # 4. Submit to hub # submit_to_hub(all_forecasts)  # Your submission function"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/getting-started.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Getting Started with AMPH Forecast Suite","text":"AMPH Forecast Suite simplifies process : Installing necessary packages Setting appropriate directory structure Pulling manipulating data use forecasting models Ensembling, visualizing, evaluating forecasts information, see package documentation function help pages.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"set-parameters","dir":"Articles","previous_headings":"Setup","what":"Set parameters","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"state_name <- \"Maryland\" geo_ids <- \"md\" forecast_date <- as.Date(\"2024-11-30\") forecast_disease <- \"influenza\" target <- \"wk inc flu hosp\" forecast_horizon_wks <- 0:3"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"load-target-observed-data","dir":"Articles","previous_headings":"Setup","what":"Load target (observed) data","title":"AMPH 2025: Forecasting with Time Series Models","text":"already pulled saved data need Collect Empirical Data. See vignettes/collect_empirical_data.Rmd details.","code":"# Load data saved from a specific forecast date:  target_data_path <- file.path(\"target-data\", paste0(\"target-hospital-admissions-\", forecast_date, \".csv\")) target_data <- readr::read_csv(file = target_data_path) ## Rows: 225 Columns: 7 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr  (4): geo_value, source, disease, signal ## dbl  (1): value ## date (2): issue_date, time_value ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"define-reference-date","dir":"Articles","previous_headings":"Setup","what":"Define Reference date","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"# reference date is the saturday following the forecast date reference_date <- get_reference_date(forecast_date)"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"sarima-forecast-package","dir":"Articles","previous_headings":"Models","what":"SARIMA (forecast package)","title":"AMPH 2025: Forecasting with Time Series Models","text":"use auto.arima function forecast package fit seasonal ARIMA model data.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"set-the-name","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Set the name","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-sarima\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"run-the-model","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Run the model","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"fc_sarima <- forecast::auto.arima(target_data$value,                                    seasonal = T,                                    lambda = \"auto\") %>%   forecast(h = length(forecast_horizon_wks),            level = c(0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98)) ## Warning in guerrero(x, lower, upper): Guerrero's method for selecting a Box-Cox ## parameter (lambda) is given for strictly positive data."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"check-that-the-model-output-is-in-the-correct-format-","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Check that the model output is in the correct format.","title":"AMPH 2025: Forecasting with Time Series Models","text":"use hubValidations package check tasks.json file create Getting Started.","code":"## --> FIX LATER <--- # hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") # file_path <- \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" # hubValidations::validate_submission(hub_path, file_path)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"save-in-hubverse-format","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Save in hubVerse Format","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_sarima <- trans_forecastpkg_hv(fc_output = fc_sarima,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks,                                      geo_ids = geo_ids)   ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_sarima,                   forecast_date) ## Model output saved to model-output/AMPH-sarima/2024-11-30-AMPH-sarima.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"neural-network-model-forecast-package","dir":"Articles","previous_headings":"Models","what":"Neural network model (forecast package)","title":"AMPH 2025: Forecasting with Time Series Models","text":"use nnetar function forecast package fit neural network model data.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"set-the-name-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Set the name","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-neuralnetwork\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"run-the-model-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Run the model","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"fc_nnet <- forecast::nnetar(target_data$value,                              lambda = \"auto\") %>%   forecast(PI = TRUE,            h = length(forecast_horizon_wks),            level = c(0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98)) ## Warning in forecast::nnetar(target_data$value, lambda = \"auto\"): Missing values ## in x, omitting rows ## Warning in guerrero(x, lower, upper): Guerrero's method for selecting a Box-Cox ## parameter (lambda) is given for strictly positive data."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"save-in-hubverse-format-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Save in hubVerse Format","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_nnet <- trans_forecastpkg_hv(fc_output = fc_nnet,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks,                                      geo_ids = geo_ids)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_nnet,                   forecast_date) ## Model output saved to model-output/AMPH-neuralnetwork/2024-11-30-AMPH-neuralnetwork.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"autoregressive-forecaster-epipredict-package","dir":"Articles","previous_headings":"Models","what":"Autoregressive Forecaster (epipredict package)","title":"AMPH 2025: Forecasting with Time Series Models","text":"use epipredict package fit autoregressive model data. specify lags 0, 7, 14 days (.e., current week, previous week, two weeks ago) forecast horizons 7, 14, 21, 28 days ahead (.e., 1 4 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"set-the-name-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Set the name","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-epipredict-arx\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"run-the-model-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Run the model","title":"AMPH 2025: Forecasting with Time Series Models","text":"ARX model fit forecast","code":"# Set up data for epipredict target_data_arx <- target_data %>%   tsibble::as_tsibble(index = time_value, key = c(geo_value)) %>%   arrange(geo_value, time_value) %>%   epiprocess::as_epi_df()  # Run model arx_forecast <- lapply(   seq(7, 28, 7),   function(days_ahead) {     epipredict::arx_forecaster(       epi_data = target_data_arx,        outcome = \"value\",       trainer = linear_reg(),       predictors = \"value\",       args_list = arx_args_list(         lags = list(c(0, 7, 14)),         ahead = days_ahead,         quantile_levels = c(0.01, 0.025, seq(.05, .95, .05), 0.975, 0.99),         nonneg = TRUE       )     )   } ) # pull out the workflow and the predictions to be able to effectively use autoplot arx_forecaster_workflow <- arx_forecast[[1]]$epi_workflow arx_forecaster_results <- arx_forecast %>%   purrr::map(~ `$`(., \"predictions\")) %>%   list_rbind() %>%   mutate(horizon = forecast_horizon_wks,          location_id = state_name,          model = model_name,          target = target) autoplot(   object = arx_forecaster_workflow,   predictions = arx_forecaster_results,   observed_response = target_data_arx %>%     filter(geo_value %in% geo_ids, time_value > (lubridate::as_date(forecast_date) - 4*30))) +   geom_vline(aes(xintercept = forecast_date))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"save-in-hubverse-format-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Save in hubVerse Format","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_arx_epipred <- trans_epipredarx_hv(fc_output = arx_forecast,                                            model_name = model_name,                                            target = target,                                            reference_date = reference_date,                                            horizon_time_steps = forecast_horizon_wks)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_arx_epipred,                   forecast_date) ## Model output saved to model-output/AMPH-epipredict-arx/2024-11-30-AMPH-epipredict-arx.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"climatological-forecaster-epipredict-package","dir":"Articles","previous_headings":"Models","what":"Climatological Forecaster (epipredict package)","title":"AMPH 2025: Forecasting with Time Series Models","text":"use epipredict package fit climatological model data. specify forecast horizon 7, 14, 21, 28 days ahead (.e., 1 4 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"set-the-name-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Set the name","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-epipredict-climate\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"run-the-model-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Run the model","title":"AMPH 2025: Forecasting with Time Series Models","text":"Climate model fit forecast","code":"# Set up data for epipredict target_data_clim <- target_data %>%   tsibble::as_tsibble(index = time_value, key = c(geo_value)) %>%   arrange(geo_value, time_value) %>%   epiprocess::as_epi_df()  # Run the model climate_forecast <- epipredict::climatological_forecaster(   target_data_clim,   outcome = \"value\",   args_list = climate_args_list(     forecast_horizon = forecast_horizon_wks,     time_type = \"week\",     quantile_levels = c(0.01, 0.025, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35,                         0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,                         0.75, 0.8, 0.85, 0.9, 0.95, 0.975, 0.99),     center_method = \"mean\",     quantile_by_key = \"geo_value\",     forecast_date = forecast_date,     nonneg = TRUE   ) ) climate_forecast_workflow <- climate_forecast$epi_workflow climate_forecast_results <- climate_forecast$predictions %>%   mutate(horizon = forecast_horizon_wks,          location_id = state_name,          model = model_name,          target = target) autoplot(   object = climate_forecast_workflow,   predictions = climate_forecast_results,   observed_response = target_data_clim %>%     filter(geo_value %in% geo_ids, time_value > (lubridate::as_date(forecast_date) - 4*30))) +   geom_vline(aes(xintercept = forecast_date))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/times-series-models.html","id":"save-in-hubverse-format-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Save in hubVerse Format","title":"AMPH 2025: Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format hub_forecast <- trans_epipredclim_hv(fc_output = climate_forecast,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_arx_epipred,                   forecast_date) ## Model output saved to model-output/AMPH-epipredict-climate/2024-11-30-AMPH-epipredict-climate.csv"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"setup","dir":"Articles","previous_headings":"","what":"1) Setup","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"Install & load required R packages","code":"library(AMPHForecastSuite) ## Loading required package: gitcreds ## Loading required package: jsonlite ## Loading required package: remotes ## Loading required package: scales ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.1     ✔ stringr   1.5.2 ## ✔ ggplot2   4.0.0     ✔ tibble    3.3.0 ## ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 ## ✔ purrr     1.1.0      ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ readr::col_factor() masks scales::col_factor() ## ✖ purrr::discard()    masks scales::discard() ## ✖ dplyr::filter()     masks stats::filter() ## ✖ purrr::flatten()    masks jsonlite::flatten() ## ✖ dplyr::lag()        masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors ## Registered S3 method overwritten by 'tsibble': ##   method               from  ##   as_tibble.grouped_df dplyr ##  ## Registered S3 method overwritten by 'epipredict': ##   method            from    ##   print.step_naomit recipes library(hubEnsembles) library(hubUtils) library(hubVis) library(scoringutils) library(dplyr) library(purrr) library(ggplot2) library(jsonlite) library(readr) library(tidyr) library(scales)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"get-flusight-data-repo","dir":"Articles","previous_headings":"","what":"2) Get FluSight data repo","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"FluSight Github repository stores forecast data 2023-2024 FluSight collaborative exercise run US CDC. project collects forecasts weekly new hospitalizations due confirmed influenza. information can found ReadMe repository: https://github.com/cdcepi/FluSight-forecast-hub. copy set forecasts repository, use build simple ensemble, visualize forecasts, score observed data.","code":"repo_dir <- clone_hub_repos(disease = forecast_disease,                             clone_dir = getwd()) ## Cloning repository... ## Cloning into 'FluSight-forecast-hub'... ## Updating files:  37% (1008/2713)Updating files:  38% (1031/2713)Updating files:  39% (1059/2713)Updating files:  40% (1086/2713)Updating files:  41% (1113/2713)Updating files:  42% (1140/2713)Updating files:  43% (1167/2713)Updating files:  44% (1194/2713)Updating files:  45% (1221/2713)Updating files:  46% (1248/2713)Updating files:  47% (1276/2713)Updating files:  48% (1303/2713)Updating files:  49% (1330/2713)Updating files:  50% (1357/2713)Updating files:  51% (1384/2713)Updating files:  52% (1411/2713)Updating files:  53% (1438/2713)Updating files:  54% (1466/2713)Updating files:  55% (1493/2713)Updating files:  56% (1520/2713)Updating files:  57% (1547/2713)Updating files:  58% (1574/2713)Updating files:  59% (1601/2713)Updating files:  60% (1628/2713)Updating files:  61% (1655/2713)Updating files:  62% (1683/2713)Updating files:  63% (1710/2713)Updating files:  64% (1737/2713)Updating files:  65% (1764/2713)Updating files:  66% (1791/2713)Updating files:  67% (1818/2713)Updating files:  68% (1845/2713)Updating files:  69% (1872/2713)Updating files:  70% (1900/2713)Updating files:  70% (1902/2713)Updating files:  71% (1927/2713)Updating files:  72% (1954/2713)Updating files:  73% (1981/2713)Updating files:  74% (2008/2713)Updating files:  75% (2035/2713)Updating files:  76% (2062/2713)Updating files:  77% (2090/2713)Updating files:  78% (2117/2713)Updating files:  79% (2144/2713)Updating files:  80% (2171/2713)Updating files:  81% (2198/2713)Updating files:  82% (2225/2713)Updating files:  83% (2252/2713)Updating files:  84% (2279/2713)Updating files:  85% (2307/2713)Updating files:  86% (2334/2713)Updating files:  87% (2361/2713)Updating files:  88% (2388/2713)Updating files:  89% (2415/2713)Updating files:  90% (2442/2713)Updating files:  91% (2469/2713)Updating files:  92% (2496/2713)Updating files:  93% (2524/2713)Updating files:  94% (2551/2713)Updating files:  95% (2578/2713)Updating files:  96% (2605/2713)Updating files:  97% (2632/2713)Updating files:  98% (2659/2713)Updating files:  98% (2668/2713)Updating files:  99% (2686/2713)Updating files: 100% (2713/2713)Updating files: 100% (2713/2713), done. ## Using repo_dir: /home/runner/work/AMPH_Forecast_Suite/AMPH_Forecast_Suite/vignettes/FluSight-forecast-hub"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"copy-specific-forecast-round-to-the-model-output-folder","dir":"Articles","previous_headings":"2) Get FluSight data repo","what":"Copy specific forecast round to the model-output folder","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"copy forecasts set models FluSight. include: # - FluSight-baseline # - MOBS-GLEAM_FLUH # - FluSight-ensemble","code":"# models from flusight models_to_copy <- c(   \"FluSight-baseline\",   \"MOBS-GLEAM_FLUH\",   \"FluSight-ensemble\" ) #models from AMPH models_created_in_AMPH <- list.dirs(\"model-output\", full.names = FALSE, recursive = FALSE)  # copy Forecast Hub forecasts to model-output folder copy_fch_outputs(repo_dir,                  forecast_date,                  models_to_copy) ## Copied files for date 2024-11-30 to /home/runner/work/AMPH_Forecast_Suite/AMPH_Forecast_Suite/vignettes/model-output"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"load-model-output-hub-forecasts-your-forecasts","dir":"Articles","previous_headings":"","what":"4) Load model output (hub forecasts & your forecasts)","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"output_path <- file.path(\"model-output\")  # Retrieve parquet/csv model output files and keep those matching the reference date file_paths <- list.files(output_path, pattern = \"\\\\.(parquet|csv)$\",                          full.names = TRUE, recursive = TRUE) file_paths <- file_paths[grepl(forecast_date, file_paths)]  if (!length(file_paths)) {   stop(\"No model-output files found for forecast_date = \", forecast_date,        \". Try a different date.\") }   # Read & bind; keep quantile forecasts; add model_id from folder name  projection_data_all <- file_paths %>%   purrr::map_dfr(function(.x) {     df <- read_model_file(.x)          # standardize expected columns just in case     if (!\"output_type\" %in% names(df))   stop(\"Missing 'output_type' in: \", .x)     if (!\"output_type_id\" %in% names(df)) stop(\"Missing 'output_type_id' in: \", .x)          df %>%       dplyr::filter(.data$output_type == \"quantile\") %>%       dplyr::mutate(         output_type_id = suppressWarnings(as.numeric(.data$output_type_id)),         model_id = basename(dirname(.x))       )   })  prep_proj_data <- projection_data_all %>%   dplyr::mutate(     reference_date  = forecast_date,     target_end_date = dplyr::coalesce(target_end_date, reference_date + 7 * as.integer(horizon))   ) %>%   dplyr::select(-tidyselect::any_of(c(\"model\", \"origin_date\")))  # Convert to hubverse model_out_tbl format projection_data_tbl <- hubUtils::as_model_out_tbl(prep_proj_data) %>%   dplyr::filter(model_id %in% c(     models_created_in_AMPH,     models_to_copy   ))   # Read and join location metadata (for names/abbreviations) # loc_data <- readr::read_csv(file.path(dir_path, \"auxiliary-data\", \"locations.csv\"), #                             show_col_types = FALSE) data(loc_data, package = \"AMPHForecastSuite\")  projection_data_tbl2 <- projection_data_tbl %>%   dplyr::left_join(     loc_data %>%         mutate(location = tolower(abbreviation)) %>%             dplyr::select(location, location_name) %>%       bind_rows(         loc_data %>%           dplyr::select(location, location_name)),     by = \"location\"   ) %>%   dplyr::mutate(location_name = dplyr::coalesce(location_name, location))   dplyr::distinct(projection_data_tbl, model_id) ## # A tibble: 7 × 1 ##   model_id                ##   <chr>                   ## 1 AMPH-epipredict-arx     ## 2 AMPH-epipredict-climate ## 3 AMPH-neuralnetwork      ## 4 AMPH-sarima             ## 5 FluSight-baseline       ## 6 FluSight-ensemble       ## 7 MOBS-GLEAM_FLUH"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"pick-location-start-date-and-uncertainty-bands","dir":"Articles","previous_headings":"","what":"5) Pick location, start date, and uncertainty bands","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"# Location can be \"US\" or a full state name (must match location_name in target_data) loc <- state_name start_date <- lubridate::as_date(forecast_date) - lubridate::weeks(12) # Middle 80% interval: uncertainty <- c(0.1, 0.9) uncertainty ## [1] 0.1 0.9"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"build-a-simple-equal-weight-ensemble","dir":"Articles","previous_headings":"","what":"6) Build a simple equal-weight ensemble","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"# Filter submitted projections to the location of interest projection_data <- projection_data_tbl2 %>%   dplyr::filter(.data$location_name == loc)  # Keep only the chosen forecast round round_dat <- projection_data %>%   dplyr::filter(target == target,                 output_type == \"quantile\",                 horizon >= 0) %>%   dplyr::collect()  # Generate a simple (equal-weight) ensemble across contributing models round_ens <- hubEnsembles::simple_ensemble(   round_dat %>%     dplyr::filter(!(model_id %in% c(\"FluSight-baseline\",                                     \"FluSight-ensemble\",                                     \"AMPH-epipredict-climate\")))) %>%   mutate(model_id = \"AMPH-ensemble\")  # Combine ensemble with individual models for plotting plot_df <- dplyr::bind_rows(round_dat, round_ens)  unique(plot_df$model_id) ## [1] \"AMPH-epipredict-arx\"     \"AMPH-epipredict-climate\" ## [3] \"AMPH-neuralnetwork\"      \"AMPH-sarima\"             ## [5] \"FluSight-baseline\"       \"FluSight-ensemble\"       ## [7] \"MOBS-GLEAM_FLUH\"         \"AMPH-ensemble\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"prepare-data-for-visualization","dir":"Articles","previous_headings":"","what":"7) Prepare data for visualization","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"# pull updated target data new_target_data_date <- lubridate::as_date(forecast_date) + lubridate::weeks(5) target_data_plot <- get_nhsn_data(   disease = forecast_disease,   geo_values = geo_ids,   forecast_date = new_target_data_date,   save_data = TRUE ) ## Important: forecast_date is more than 1 week ago. Pulling data issued prior to forecast_date. ## Pulling data issued on or before 2025-01-04 ## Warning: No API key found. You will be limited to non-complex queries and encounter rate ## limits if you proceed. ## ℹ See `?save_api_key()` for details on obtaining and setting API keys. ## This warning is displayed once every 8 hours. target_data_plot <- readr::read_csv(   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")),   show_col_types = FALSE)  # Forecasts to tidy plot proj_data <- hubUtils::as_model_out_tbl(plot_df) %>%   dplyr::rename(target_date = target_end_date) %>%   dplyr::mutate(output_type_id = suppressWarnings(as.numeric(output_type_id))) %>%   dplyr::arrange(model_id, horizon, target_date, output_type_id) %>%   dplyr::distinct(model_id, horizon, target_date, output_type_id, .keep_all = TRUE)  # Observed data for the same location and time window target_data_plot <- target_data_plot %>%   dplyr::filter(time_value > start_date) %>%   dplyr::rename(observation = value,                 date = time_value)  head(proj_data) ## # A tibble: 6 × 10 ##   model_id      target_date reference_date target horizon location location_name ##   <chr>         <date>      <date>         <chr>    <dbl> <chr>    <chr>         ## 1 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 24       Maryland      ## 2 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 24       Maryland      ## 3 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 24       Maryland      ## 4 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 24       Maryland      ## 5 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 24       Maryland      ## 6 AMPH-ensemble 2024-11-30  2024-11-30     wk in…       0 md       Maryland      ## # ℹ 3 more variables: output_type <chr>, output_type_id <dbl>, value <dbl> head(target_data_plot) ## # A tibble: 6 × 7 ##   geo_value source disease   signal            issue_date date       observation ##   <chr>     <chr>  <chr>     <chr>             <date>     <date>           <dbl> ## 1 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-09-08           3 ## 2 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-09-15           5 ## 3 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-09-22           1 ## 4 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-09-29           1 ## 5 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-10-06           0 ## 6 md        nhsn   influenza confirmed_admiss… 2024-12-29 2024-10-13           2"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"plot-forecasts-vs--truth","dir":"Articles","previous_headings":"","what":"8) Plot forecasts vs. truth","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"# This is having issues  hubVis::plot_step_ahead_model_output(   proj_data,   target_data = target_data_plot,   use_median_as_point = TRUE,   show_legend = TRUE,   intervals = 0.8,           ens_name = \"AMPH-ensemble\",   ens_color = \"black\" ) library(dplyr) library(tidyr) library(ggplot2) library(scales)  # target_data_plot <- readr::read_csv( #   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")), #   show_col_types = FALSE)  # Identify ensemble id from the object you created earlier ens_id <- unique(round_ens$model_id)[1]  # e.g., \"hub-ensemble\"  # Build the 80% ribbon (0.1 / 0.9) for all models ribbon_80 <- proj_data %>%   filter(output_type == \"quantile\", output_type_id %in% c(0.1, 0.9)) %>%   mutate(output_type_id = as.numeric(output_type_id)) %>%   select(model_id, horizon, target_date, output_type_id, value) %>%   pivot_wider(names_from = output_type_id, values_from = value, names_prefix = \"q\") %>%   rename(ymin = q0.1, ymax = q0.9)  # Median (0.5) for all models med_50 <- proj_data %>%   filter(output_type == \"quantile\", output_type_id == 0.5) %>%   select(model_id, horizon, target_date, value) %>%   mutate(line_width = if_else(model_id == ens_id, 1.1, 0.8))  # Legend order: others first, ensemble last model_levels <- proj_data %>%   distinct(model_id) %>%   pull(model_id) %>%   setdiff(ens_id) %>%   c(ens_id)  # Okabe–Ito palette (color-blind friendly) okabe_ito <- c(   \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\",   \"#0072B2\", \"#D55E00\", \"#CC79A7\", \"#999999\" ) n_other <- length(model_levels) - 1  other_cols <- if (n_other <= length(okabe_ito)) okabe_ito[seq_len(n_other)] else scales::hue_pal(l = 45, c = 100)(n_other)  # Lines: others = Okabe–Ito, ensemble = black color_vals <- setNames(c(other_cols, \"#000000\"), model_levels) # Ribbons: same hues; ensemble darker gray so black line pops fill_vals  <- setNames(c(other_cols, \"#3A3A3A\"), model_levels)  ggplot() +   geom_ribbon(     data = ribbon_80,     aes(x = target_date, ymin = ymin, ymax = ymax, fill = model_id),     alpha = 0.22, show.legend = TRUE   ) +   geom_line(     data = med_50,     aes(x = target_date, y = value, color = model_id, linewidth = line_width),     lineend = \"round\", alpha = 0.98, show.legend = TRUE   ) +   geom_point(     data = target_data_plot,     aes(x = date, y = observation),     size = 1.2, alpha = 0.85, inherit.aes = FALSE,     color = \"grey50\"   ) +   geom_line(     data = target_data_plot,     aes(x = date, y = observation),     alpha = 0.85, inherit.aes = FALSE,     color = \"grey50\"   ) +   scale_color_manual(values = color_vals, name = \"Model\") +   scale_fill_manual(values  = fill_vals,  name = \"Model\") +   scale_linewidth_identity() +   labs(x = \"Target date\", y = \"Weekly incident hospitalizations\") +   theme_minimal(base_size = 12) +   theme(legend.position = \"right\") ## Warning: Removed 8 rows containing missing values or values outside the scale range ## (`geom_ribbon()`)."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/utilizing-hub-output.html","id":"score-forecasts-wis-coverage","dir":"Articles","previous_headings":"","what":"10) Score forecasts (WIS, coverage)","title":"AMPH 2025: Simple Ensemble, Visualization, and Scoring Using Hub Model Output","text":"","code":"target_data_plot <- readr::read_csv(   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")),   show_col_types = FALSE)  scoring_target_data <- target_data_plot %>%   filter(geo_value %in% geo_ids,          issue_date >= forecast_date + 28,          time_value > \"2022-09-01\") %>%   select(geo_value, time_value, value) %>%   drop_na(value) %>%   epiprocess::as_epi_df(time_value = time_value) # Join forecasts with observations at (target_date, location) # and conform to scoringutils \"forecast\" structure.  scoring_df <- dplyr::left_join(   proj_data,   scoring_target_data %>%     dplyr::rename(observation = value,                   target_date = time_value) %>%     mutate(location_name = \"Maryland\") %>%     select(-geo_value),   by = c(\"target_date\", \"location_name\"),   relationship = \"many-to-one\" ) %>%   dplyr::rename(     model = model_id,     predicted = value,     observed = observation,     quantile_level = output_type_id   )  # Convert to a scoringutils forecast object forecast <- scoringutils::as_forecast_quantile(   scoring_df,   observed       = \"observed\",   predicted      = \"predicted\",   quantile_level = \"quantile_level\",   # be explicit so extra cols don't confuse the unit of a single forecast   forecast_unit  = c(\"model\", \"location_name\", \"target_date\") )  # Score (WIS, coverage, etc.) scores <- scoringutils::score(forecast)  scoringutils::summarise_scores(scores, by = \"model\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"ACCIDDA. Author, maintainer.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"ACCIDDA (2024). AMPHForecastSuite: Suite Tools Infectious Disease Forecasting Pipeline Hub. R package version 0.1.0, https://github.com/ACCIDDA/AMPH_Forecast_Suite.","code":"@Manual{,   title = {AMPHForecastSuite: Suite of Tools for Infectious Disease Forecasting Pipeline and Hub},   author = {{ACCIDDA}},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/ACCIDDA/AMPH_Forecast_Suite}, }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"amph-forecast-suite","dir":"","previous_headings":"","what":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"Suite tools helper functions build run infectious disease forecasting pipeline hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"AMPH Forecast Suite R package provides comprehensive toolkit building infectious disease forecasting pipelines hubs. streamlines process working multiple forecasting packages : Installing managing dependencies key forecasting packages Providing helper functions translate data different package formats Facilitating integration hubverse, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"can install development version GitHub:","code":"# Install remotes if you haven't already install.packages(\"remotes\")  # Install AMPH Forecast Suite remotes::install_github(\"ACCIDDA/AMPH_Forecast_Suite\")"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"install-packages-and-build-directory-structure","dir":"","previous_headings":"Usage","what":"Install Packages and Build Directory Structure","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"package includes function install required packages set directory structure forecasting project.","code":"library(AMPHForecastSuite)  # Install all forecasting packages install_forecast_packages()  # Or install specific categories install_forecast_packages(   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = TRUE,   install_data = TRUE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"AMPH Forecast Suite simplifies process : Installing necessary packages Setting appropriate directory structure Pulling manipulating data use forecasting models Running forecasts using multiple packages Ensembling, visualizing, evaluating forecasts information, see package documentation function help pages.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"package-installation","dir":"","previous_headings":"Available Functions","what":"Package Installation","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"install_forecast_packages(): Install required forecasting packages","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"fabletsibble-converters","dir":"","previous_headings":"Available Functions > Data Conversion Functions","what":"Fable/tsibble Converters","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"convert_hub_to_tsibble(): Convert hub format tsibble convert_hub_to_fable(): Convert hub format fable modeling convert_fable_to_hub(): Convert fable forecasts hub format convert_tsibble_to_hub(): Convert tsibble back hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"epiestim-converters","dir":"","previous_headings":"Available Functions > Data Conversion Functions","what":"EpiEstim Converters","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"convert_hub_to_epiestim(): Convert hub format EpiEstim format convert_epiestim_to_hub(): Convert EpiEstim results hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"epinow2-converters","dir":"","previous_headings":"Available Functions > Data Conversion Functions","what":"EpiNow2 Converters","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"convert_hub_to_epinow2(): Convert hub format EpiNow2 format convert_epinow2_to_hub(): Convert EpiNow2 results hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"additional-resources","dir":"","previous_headings":"Available Functions","what":"Additional Resources","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"hubEvals Documentation: https://hubverse-org.github.io/hubEvals/ WIS Scoring Function: score_wis() reference Data Format Requirements: Formatting data hubEvals","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"package-dependencies","dir":"","previous_headings":"","what":"Package Dependencies","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"package helps install work :","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"hubverse-packages","dir":"","previous_headings":"Package Dependencies","what":"Hubverse Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"hubData: Data management forecast hubs hubUtils: Utility functions hubs hubValidations: Validation tools hub submissions hubVis: Visualization tools hub data hubAdmin: Administrative tools hubs","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"forecasting-packages","dir":"","previous_headings":"Package Dependencies","what":"Forecasting Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"fable: Forecasting models tidy time series fabletools: Tools working fable models feasts: Feature extraction statistics time series tsibble: Tidy temporal data frames","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"epidemiological-packages","dir":"","previous_headings":"Package Dependencies","what":"Epidemiological Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"EpiEstim: Estimate time-varying reproduction numbers EpiNow2: Estimate Rt forecast delays epipredict: Epidemiological forecasting tools","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"data-access","dir":"","previous_headings":"Package Dependencies","what":"Data Access","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"epidatr: Access epidemiological data various sources","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"Contributions welcome! Please feel free submit Pull Request.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"project licensed GPL-3 License - see LICENSE file details.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"use package research, please cite :","code":"ACCIDDA (2025). AMPH Forecast Suite: Tools for Infectious Disease Forecasting. R package version 0.1.0. https://github.com/ACCIDDA/AMPH_Forecast_Suite"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"questions issues, please open issue GitHub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AMPH Forecast Suite — AMPHForecastSuite-package","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"comprehensive suite tools helper functions build run infectious disease forecasting hub. package facilitates installation integration key forecasting packages including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"install_forecast_packages: Install required forecasting packages convert_hub_to_fable: Convert hub data fable format convert_fable_to_hub: Convert fable forecasts hub format convert_hub_to_epiestim: Convert hub data EpiEstim format convert_epiestim_to_hub: Convert EpiEstim results hub format convert_hub_to_epinow2: Convert hub data EpiNow2 format convert_epinow2_to_hub: Convert EpiNow2 results hub format get_nhsn_data: Retrieve data NHSN","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"Maintainer: ACCIDDA info@example.com","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone github forecast repo — clone_hub_repos","title":"Clone github forecast repo — clone_hub_repos","text":"Clones influenza, covid, rsv forecast hub repos use learning, visualization, etc. Clones current working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone github forecast repo — clone_hub_repos","text":"","code":"clone_hub_repos(disease = \"influenza\", old_rsv_repo = TRUE, clone_dir = NULL)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone github forecast repo — clone_hub_repos","text":"disease Character. One \"influenza\", \"covid\", \"rsv\". Default \"influenza\". old_rsv_repo Logical. TRUE, uses old RSV forecast hub repository. Default TRUE. FALSE, uses new CDC RSV forecast hub repository. parameter relevant disease \"rsv\". RSV forecast hub moved Hopkins CDC starting 2025-26 season. clone_dir Character. Directory clone repository . Default current working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone github forecast repo — clone_hub_repos","text":"Character. path cloned repository.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone github forecast repo — clone_hub_repos","text":"","code":"if (FALSE) { # \\dontrun{ # Clone the influenza forecast hub repository flu_repo <- clone_hub_repos(disease = \"influenza\") # Clone the COVID-19 forecast hub repository covid_repo <- clone_hub_repos(disease = \"covid\") # Clone the old RSV forecast hub repository old_rsv_repo <- clone_hub_repos(disease = \"rsv\", old_rsv_repo = TRUE) # Clone the new CDC RSV forecast hub repository new_rsv_repo <- clone_hub_repos(disease = \"rsv\", old_rsv_repo = FALSE) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"Converts EpiEstim reproduction number estimates hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"","code":"convert_epiestim_to_hub(   epiestim_result,   location = \"unknown\",   target = \"R_eff\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"epiestim_result EpiEstim result object (output estimate_R) location Character. Location identifier. Default \"unknown\". target Character. Target variable name. Default \"R_eff\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"data frame hub format R estimates","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have EpiEstim results # hub_r_estimates <- convert_epiestim_to_hub(epiestim_res, location = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"Converts EpiNow2 estimates forecasts hub submission format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"","code":"convert_epinow2_to_hub(   epinow2_result,   location = \"unknown\",   target = \"inc\",   extract_type = \"forecasts\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"epinow2_result EpiNow2 result object (output epinow) location Character. Location identifier. Default \"unknown\". target Character. Target variable name. Default \"inc\". extract_type Character. Type data extract: \"forecasts\", \"estimates\", \"\". Default \"forecasts\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have EpiNow2 results # hub_forecasts <- convert_epinow2_to_hub(epinow2_res, location = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"Converts fable forecast output hub submission format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"","code":"convert_fable_to_hub(fable_forecast, location = NULL, target = \"inc\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"fable_forecast fable forecast object location Character. Location identifier. Default NULL (extract data). target Character. Target name forecast. Default \"inc\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a fable forecast object # hub_forecast <- convert_fable_to_hub(fc, location = \"US\", target = \"inc\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"Converts data hub format format required EpiEstim package estimating time-varying reproduction numbers.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"","code":"convert_hub_to_epiestim(   hub_data,   date_col = \"date\",   incidence_col = \"value\",   location_col = \"location\",   location_filter = NULL )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"hub_data Data frame hub format date incidence columns date_col Character. Name date column. Default \"date\". incidence_col Character. Name incidence column. Default \"value\". location_col Character. Name location column. Default \"location\". location_filter Character. Location filter (multiple locations). Default NULL.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"data frame formatted EpiEstim columns: dates, (incidence)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) ) epiestim_data <- convert_hub_to_epiestim(hub_data, location_filter = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"Converts data hub format format required EpiNow2 package estimating reproduction numbers generating forecasts.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"","code":"convert_hub_to_epinow2(   hub_data,   date_col = \"date\",   cases_col = \"value\",   location_col = \"location\",   location_filter = NULL )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"hub_data Data frame hub format date case columns date_col Character. Name date column. Default \"date\". cases_col Character. Name cases column. Default \"value\". location_col Character. Name location column. Default \"location\". location_filter Character. Location filter (multiple locations). Default NULL.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"data frame formatted EpiNow2 columns: date, confirm","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) ) epinow2_data <- convert_hub_to_epinow2(hub_data, location_filter = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to Fable Format — convert_hub_to_fable","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"Converts data hub format format suitable fable modeling. essentially wrapper around convert_hub_to_tsibble additional preparation fable models.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"","code":"convert_hub_to_fable(hub_data, ...)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"hub_data Data frame hub format ... Additional arguments passed convert_hub_to_tsibble","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"tsibble object ready fable modeling","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 10),   location = \"US\",   value = rnorm(10, 100, 10) ) fable_data <- convert_hub_to_fable(hub_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"Converts data hub format tsibble format use fable package.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"","code":"convert_hub_to_tsibble(   hub_data,   date_col = \"date\",   value_col = \"value\",   location_col = \"location\",   index = \"date\",   key = \"location\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"hub_data Data frame hub format columns date, location, value, etc. date_col Character. Name date column. Default \"date\". value_col Character. Name value column. Default \"value\". location_col Character. Name location column. Default \"location\". index Character. Name use time index. Default \"date\". key Character vector. Key variables tsibble. Default \"location\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"tsibble object","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 10),   location = \"US\",   value = rnorm(10, 100, 10) ) ts_data <- convert_hub_to_tsibble(hub_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert tsibble to Hub Format — convert_tsibble_to_hub","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"Converts tsibble object back standard hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"","code":"convert_tsibble_to_hub(tsibble_data)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"tsibble_data tsibble object","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Convert back from tsibble # hub_data <- convert_tsibble_to_hub(ts_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"Copy Forecast Hub Outputs model-output","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"","code":"copy_fch_outputs(   repo_dir,   forecast_date,   models_to_copy = c(\"FluSight-baseline\", \"MOBS-GLEAM_FLUH\", \"FluSight-ensemble\") )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"repo_dir Path cloned forecast hub repository. forecast_date Forecast date \"YYYY-MM-DD\" format. Can vector dates. models_to_copy Character vector. Names models copy outputs .","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"function copies forecast output files specified forecasting hub repository local \"model-output\" directory given forecast date. allows users specify models' outputs copy.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have cloned the influenza forecast hub repository flu_repo <- clone_hub_repos(disease = \"influenza\") # Copy forecast outputs for a specific date copy_fch_outputs(repo_dir = flu_repo, forecast_date = \"2023-10-02\",                  models_to_copy = c(\"FluSight-baseline\", \"MOBS-GLEAM_FLUH\", \"FluSight-ensemble\")) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"Pulls weekly hospitalization count data NHSN (National Healthcare Safety Network) via epidatr package influenza, COVID-19, RSV.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"","code":"get_nhsn_data(   disease = \"influenza\",   geo_values = \"MD\",   forecast_date = \"2025-10-12\",   save_data = TRUE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"disease Character string specifying disease. Must one : \"influenza\", \"covid\", \"rsv\" (case-insensitive). geo_values Character vector geographic locations (e.g., state abbreviations like \"CA\", \"NY\"). Default \"MD\" Maryland data. forecast_date Character vector date forecast \"YYYY-MM-DD\". Sunday. save_data Logical. TRUE, saves retrieved data CSV file working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"data frame containing NHSN hospitalization data columns   typically including geo_value, time_value, hospitalization counts.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"","code":"if (FALSE) { # \\dontrun{ # Get COVID-19 data for California and New York for specific weeks covid_data <- get_nhsn_data(   disease = \"covid\",   geo_values = c(\"ca\", \"ny\"),   forecast_date = \"2025-10-12\" )  # Get influenza data for California and New York for specific weeks flu_data <- get_nhsn_data(   disease = \"influenza\",   geo_values = c(\"ca\", \"ny\"),   forecast_date = \"2025-10-12\" )  # Get RSV data for MD rsv_data <- get_nhsn_data(   disease = \"rsv\",   geo_values = \"MD\",   forecast_date = \"2025-10-12\" ) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the hubVerse reference date. — get_reference_date","title":"Get the hubVerse reference date. — get_reference_date","text":"Return date **Saturday follows** forecast date. `reference_date` defined forecast hubs Saturday Following forecast date.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the hubVerse reference date. — get_reference_date","text":"","code":"get_reference_date(forecast_date)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the hubVerse reference date. — get_reference_date","text":"forecast_date vector dates process. Accepts objects coercible `Date`: `Date`, `POSIXct`, character strings unambiguous ISO-like formats (e.g., `\"2025-10-13\"`). See Details time-zone notes `POSIXct`.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the hubVerse reference date. — get_reference_date","text":"`Date` vector length `forecast_date`, giving Saturday   `forecast_date`. `NA` inputs yield `NA` outputs. function fully vectorized.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the hubVerse reference date. — get_reference_date","text":"","code":"# Basic usage get_reference_date(\"2025-10-13\") #> [1] \"2025-10-18\" #> \"2025-10-18\"  # Input is Saturday: strictly after by default get_reference_date(as.Date(\"2025-10-18\")) #> [1] \"2025-10-18\" #> \"2025-10-25\"  # Allow returning the same day if it is Saturday get_reference_date(\"2025-10-18\") #> [1] \"2025-10-18\" #> \"2025-10-18\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Forecasting Packages — install_forecast_packages","title":"Install Forecasting Packages — install_forecast_packages","text":"function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Forecasting Packages — install_forecast_packages","text":"","code":"install_forecast_packages(   install_delphi = TRUE,   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = TRUE,   install_data = TRUE,   repos = \"https://cloud.r-project.org\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Forecasting Packages — install_forecast_packages","text":"install_delphi Logical. TRUE, installs delphi packages. Default TRUE. install_hubverse Logical. TRUE, installs hubverse packages. Default TRUE. install_forecasting Logical. TRUE, installs forecasting packages (fable, etc.). Default TRUE. install_epi Logical. TRUE, installs epidemiological packages (EpiEstim, EpiNow2). Default TRUE. install_data Logical. TRUE, installs data access packages (epidatr). Default TRUE. repos Character. Repository install packages . Default \"https://cloud.r-project.org\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Forecasting Packages — install_forecast_packages","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Forecasting Packages — install_forecast_packages","text":"","code":"if (FALSE) { # \\dontrun{ # Install all packages install_forecast_packages()  # Install only hubverse packages install_forecast_packages(install_forecasting = FALSE,                          install_epi = FALSE,                          install_data = FALSE) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read model file helper — read_model_file","title":"Read model file helper — read_model_file","text":"helper picks right reader supports .parquet, .parquet.gz, .csv, .csv.gz","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read model file helper — read_model_file","text":"","code":"read_model_file(path)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read model file helper — read_model_file","text":"path character(1) path file","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read model file helper — read_model_file","text":"","code":"if (FALSE) { # \\dontrun{ read_model_file(\"path/to/file.parquet\") read_model_file(\"path/to/file.csv.gz\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Save Model Output for Forecasting Hub — save_model_output","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"function helps save output forecasting model structured directory format suitable submission forecasting hub. creates necessary directories exist saves forecast output CSV file named forecast date model name.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"","code":"save_model_output(model_name = \"AMPH-SARIMA\", fc_output, forecast_date)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"model_name Character. Name forecasting model (e.g., \"AMPH-SARIMA\"). fc_output Data frame. Forecast output saved. forecast_date Character. Date forecast \"YYYY-MM-DD\" format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up File Structure for a Forecasting Project — setup_file_structure","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages. function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"","code":"setup_file_structure(project_dir = \"AMPH_forecast_project\")  setup_file_structure(project_dir = \"AMPH_forecast_project\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"project_dir Character. Directory set project structure. Default \"AMPH_forecast_project\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"NULL (invisibly) NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }  if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"Converts output ARX forecasting model (e.g., arx_forecast) required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"","code":"trans_epipredarx_hv(   fc_output = arx_forecast,   model_name = \"AMPH-epipredict-arx\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3 )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"fc_output List. Output ARX forecasting model (e.g., arx_forecast). model_name Character. Name forecasting model. Default \"AMPH-epipredict-arx\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have ARX forecast output hub_forecast <- trans_epipredarx_hv(fc_output = arx_forecast,                     model_name = \"AMPH-epipredict-arx\",                     target = \"wk inc flu hosp\",                     reference_date = forecast_date + 6,                     horizon_time_steps = 0:3) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"Converts output climatological_forecaster model required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"","code":"trans_epipredclim_hv(   fc_output = climate_forecast,   model_name = \"AMPH-epipredict-climate\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3 )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"fc_output List. output climatological_forecaster model, typically containing 'predictions' data frame. model_name Character. Name forecasting model. Default \"AMPH-epipredict-climate\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format. horizon_time_steps Integer vector. Time steps forecast horizon. Default 0:3 (0 3 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have climate_forecast output from climatological_forecaster hub_format hub_forecast <- trans_epipredclim_hv(fc_output = climate_forecast,                                     model_name = \"AMPH-epipredict-climate\",                                     target = \"wk inc flu hosp\",                                     reference_date = forecast_date + 6,                                     horizon_time_steps = 0:3) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"Converts output forecasting model `forecast` package required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"","code":"trans_forecastpkg_hv(   fc_output = fc_sarima,   model_name = \"AMPH-sarima\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3,   geo_ids = \"md\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"fc_output Data frame. Output `forecast` package forecasting model. model_name Character. Name forecasting model. Default \"AMPH-epipredict-arx\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format. horizon_time_steps Integer vector. Time steps forecast horizon. Default 0:3 (0 3 weeks ahead). geo_ids Character vector. Geographic location identifiers. Default \"md\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have ARX forecast output hub_forecast <- trans_forecastpkg_hv(fc_output = fc_sarima,                    model_name = \"AMPH-sarima\",                    target = \"wk inc flu hosp\",                    reference_date = forecast_date + 6,                    horizon_time_steps = 0:3,                    geo_ids = \"md\")                    } # }"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"AMPHForecastSuite 0.1.0","text":"Initial release AMPH Forecast Suite package Added install_forecast_packages() function install required forecasting packages Fable/tsibble converters (convert_hub_to_fable(), convert_fable_to_hub(), etc.) EpiEstim converters (convert_hub_to_epiestim(), convert_epiestim_to_hub()) EpiNow2 converters (convert_hub_to_epinow2(), convert_epinow2_to_hub()) Support installing hubverse packages (hubData, hubUtils, hubValidations, hubVis, hubAdmin) Support forecasting packages (fable, fabletools, feasts, tsibble) Support epidemiological packages (EpiEstim, EpiNow2, epipredict) Support data access packages (epidatr)","code":""}]
