[{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to AMPH Forecast Suite","title":"Contributing to AMPH Forecast Suite","text":"Thank interest contributing AMPH Forecast Suite! welcome contributions community.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How to Contribute","what":"Reporting Bugs","title":"Contributing to AMPH Forecast Suite","text":"find bug, please open issue GitHub : - clear description bug - Steps reproduce behavior - Expected behavior - R version operating system","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"suggesting-enhancements","dir":"","previous_headings":"How to Contribute","what":"Suggesting Enhancements","title":"Contributing to AMPH Forecast Suite","text":"welcome suggestions new features enhancements. Please open issue : - clear description enhancement - useful - Example use cases","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"How to Contribute","what":"Pull Requests","title":"Contributing to AMPH Forecast Suite","text":"Fork repository Create new branch feature (git checkout -b feature/AmazingFeature) Make changes Add tests changes Update documentation needed Commit changes (git commit -m 'Add AmazingFeature') Push branch (git push origin feature/AmazingFeature) Open Pull Request","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"How to Contribute","what":"Code Style","title":"Contributing to AMPH Forecast Suite","text":"Follow tidyverse style guide Use roxygen2 documentation Include examples function documentation Write tests new functions","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"How to Contribute","what":"Documentation","title":"Contributing to AMPH Forecast Suite","text":"Update README.md change functionality Update NEWS.md changes Ensure functions proper roxygen2 documentation Update vignettes adding major new features","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"development-setup","dir":"","previous_headings":"","what":"Development Setup","title":"Contributing to AMPH Forecast Suite","text":"Clone repository Install development dependencies: Load package development: Run tests: Build documentation:","code":"install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\", \"rmarkdown\")) devtools::load_all() devtools::test() devtools::document()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions?","title":"Contributing to AMPH Forecast Suite","text":"Feel free open issue questions contributing.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/01-getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"1. Getting Started with AMPH Forecast Suite","text":"AMPH Forecast Suite provides comprehensive toolkit building infectious disease forecasting pipelines hubs. vignette demonstrates basic workflow using package. package suite still active development, welcome contributions feedback community.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/01-getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"1. Getting Started with AMPH Forecast Suite","text":"First, ensure R (version 4.0 higher) RStudio installed. Next, set git credentials, already done . Github longer supports password authentication git operations. need create personal access token (PAT) use place password git operations. Run open webpage get new personal access token (PAT): See guide github website information creating GitHub personal access token (PAT). , set git credentials R (can also via terminal Git Bash): Next, install AMPH Forecast Suite CRAN GitHub: Next, install required forecasting packages: can also selectively install specific categories:","code":"# Check R version R.Version()$version.string #> [1] \"R version 4.5.1 (2025-06-13)\" usethis::create_github_token(   scopes = c(\"repo\", \"user\", \"gist\", \"workflow\"),   description = \"Git operations from R\",   host = NULL ) #> ☐ Call `gitcreds::gitcreds_set()` to register this token in the local Git #>   credential store. #> ! On Linux, it can be tricky to store credentials persistently. #> ℹ Read more in the 'Managing Git(Hub) Credentials' article #>   (<https://usethis.r-lib.org/articles/articles/git-credentials.html>). #> ℹ It is also a great idea to store this token in any password-management #>   software that you use. #> ☐ Open URL #>   <https://github.com/settings/tokens/new?scopes=repo,user,gist,workflow&description=Git #>   operations from R>. # Set your git credentials (replace with your actual info) install.packages(\"gitcreds\")  gitcreds::gitcreds_set(   username = \"your_github_username\",   password = \"your_github_token\" ) # Install remotes if you haven't already install.packages(\"remotes\")  # Install AMPH Forecast Suite remotes::install_github(\"ACCIDDA/AMPH_Forecast_Suite\") library(AMPHForecastSuite)  # Install all forecasting packages install_forecast_packages() # Install only hubverse and forecasting packages install_forecast_packages(   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = FALSE,   install_data = FALSE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/01-getting-started.html","id":"setting-up-directory-structure","dir":"Articles","previous_headings":"","what":"Setting Up Directory Structure","title":"1. Getting Started with AMPH Forecast Suite","text":"Set directory structure forecasting project:","code":"# Create project directory and subdirectories # this sets the working directory to the new project directory setup_file_structure(project_dir = \"My_Forecast_Project\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/01-getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"1. Getting Started with AMPH Forecast Suite","text":"Define forecasting effort: Determine forecasting disease targets Identify data sources geographies Pull manipulating data use forecasting models Run forecasting models Ensemble, visualize, evaluate forecasts Share forecasts stakeholders information, see package documentation function help pages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"set-parameters","dir":"Articles","previous_headings":"","what":"Set parameters","title":"2. Collect Empirical Data for Forecasting","text":"","code":"state_name <- \"Maryland\" geo_ids <- \"md\" forecast_disease <- \"influenza\" forecast_date = \"2024-12-01\" #\"2025-10-12\" # Sunday"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"2. Collect Empirical Data for Forecasting","text":"","code":"knitr::opts_chunk$set(echo = TRUE)  library(AMPHForecastSuite) library(tidyverse) library(jsonlite) library(epidatr) library(epiprocess)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"save-and-check-api-key","dir":"Articles","previous_headings":"","what":"Save and check API key","title":"2. Collect Empirical Data for Forecasting","text":"Go https://api.delphi.cmu.edu/epidata/admin/registration_form register psuedo-anonymous account. Run command save API key .Renviron file. says prompt, add line DELPHI_EPIDATA_KEY=yourkeyhere .Renviron file. Save close file, restart R RStudio. restarting, run command epidatr::get_api_key() check API key saved. API key come, can use one comes: 04e7369e1541a","code":"# Follow instructions about opening `.Renviron` file epidatr::save_api_key()  # Check that the API key is saved epidatr::get_api_key()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"pull-nhsn-hospitalization-data","dir":"Articles","previous_headings":"","what":"Pull NHSN hospitalization data","title":"2. Collect Empirical Data for Forecasting","text":"","code":"target_data <- get_nhsn_data(   disease = forecast_disease, #\"influenza\"  or \"rsv\" or \"covid\"   geo_values = geo_ids,   forecast_date = forecast_date,   save_data = TRUE ) ## Important: forecast_date is more than 1 week ago. Pulling data issued prior to forecast_date. ## Pulling data issued on or before 2024-12-01 ## Warning: No API key found. You will be limited to non-complex queries and encounter rate ## limits if you proceed. ## ℹ See `?save_api_key()` for details on obtaining and setting API keys. ## This warning is displayed once every 8 hours."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"or-pull-directly-with-epidatr","dir":"Articles","previous_headings":"","what":"Or pull directly with epidatr","title":"2. Collect Empirical Data for Forecasting","text":"Note: pull data directly pertains previous forecast date, need filter issue date. code set , pull recent data. pull data previous forecast date, use get_nhsn_data() function .","code":"# Map disease names to NHSN signal names # Based on epidatr NHSN signals for respiratory diseases signal_map <- list(   \"influenza\" = \"confirmed_admissions_flu_ew\",   \"covid\" = \"confirmed_admissions_covid_ew\",   \"rsv\" = \"confirmed_admissions_rsv_ew\" ) signal <- signal_map[[forecast_disease]]  # Call epidatr to get the data target_data <- epidatr::pub_covidcast(   source = \"nhsn\",   signals = signal,   geo_type = \"state\",   time_type = \"week\",   geo_values = tolower(geo_ids) )  target_data <- target_data %>%   dplyr::filter(time_value >= lubridate::as_date(\"2020-09-01\"),                 time_value < lubridate::as_date(forecast_date)) %>%   dplyr::mutate(disease = forecast_disease, signal = signal) %>%   dplyr::select(geo_value, source, disease, signal, issue_date = issue, time_value, value)  # convert to match hubverse  data(\"loc_data\")  target_data <- target_data %>%   dplyr::mutate(abbreviation = toupper(geo_value)) %>%   dplyr::mutate(target_end_date = time_value + 6) %>%   dplyr::mutate(target = paste0(\"wk inc \", disease, \" hosp\")) %>%   dplyr::left_join(loc_data %>% dplyr::select(abbreviation, location, location_name),                    by = c(\"abbreviation\" = \"abbreviation\")) %>%   dplyr::arrange(target_end_date, location_name) %>%   dplyr::select(location, abbreviation, location_name, target, source, disease, signal,                 target_end_date, issue_date, observation = value)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"check-the-data","dir":"Articles","previous_headings":"Or pull directly with epidatr","what":"Check the data","title":"2. Collect Empirical Data for Forecasting","text":"","code":"ggplot(target_data, aes(x = target_end_date, y = observation)) +   geom_line() +   facet_wrap(~toupper(location_name), scales = \"free_y\") +   labs(title = paste(\"NHSN Hospital Admissions\"),        x = NULL,        y = \"Weekly hospital admissions (n)\",        alt = \"Line plot of weekly hospital admissions over time\") +   theme_bw()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02-collect_empirical_data.html","id":"save-it","dir":"Articles","previous_headings":"Or pull directly with epidatr","what":"Save it","title":"2. Collect Empirical Data for Forecasting","text":"","code":"write_csv(target_data, file = file.path(\"target-data\", paste0(\"target-hospital-admissions-\", forecast_date, \".csv\")))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"2b: Introduction to panel data versioning and nowcasting","text":"vignette walks minimal baseline nowcasting workflow using baselinenowcast epinowcast packages. focus weekly confirmed hospital admissions attributed influenza Maryland illustrate : - retrieve revision-aware surveillance data, - build reporting triangle, - estimate reporting delay distribution, - generate deterministic point nowcast corrects -reporting. repeat steps data baselinenowcast documentation.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"2b: Introduction to panel data versioning and nowcasting","text":"assume followed first guide course, API key ready DELPHI Epidata API. nowcast confirmed hospital admission influenza Maryland. specify date nowcasting, date final data evaluation. Load required packages.","code":"epidatr::get_api_key() state_name <- \"Maryland\" geo_values <- \"md\" forecast_disease <- \"influenza\" nowcast_date = \"2025-02-10\" eval_date = \"2025-03-21\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"retrieve-and-prepare-surveillance-data","dir":"Articles","previous_headings":"","what":"Retrieve and Prepare Surveillance Data","title":"2b: Introduction to panel data versioning and nowcasting","text":"Use epidatr::pub_covidcast() pull National Healthcare Safety Network (NHSN) hospital admission data selected disease location. data returned revision tracking (issue) rely nowcasting. transformed data format epinowcast, columns * reference_date date observation, example date incident influenza admission hospital * report_date: date report given set observations reference date * confirm: total (.e. cumulative) number hospitalisations reference date report date. Create two views data: real-time version available nowcast date final version used evaluation. use convenient filtering functions epinowcast. epinowcast function epinowcast::enw_latest_data() filters observations keep latest available reported total counts reference date. epinowcast function epinowcast::enw_filter_report_dates() used create truncated dataset generating retrospective nowcast, using data available nowcast date. Let’s plot two datasets, red line shows total number confirmed admissions reference date, across delays, using data available nowcast date, whereas blackline show final value data. see revision occurred ! Let’s try fix .","code":"# Map disease names to NHSN signal names   # Based on epidatr NHSN signals for respiratory diseases   signal_map <- list(     \"influenza\" = \"confirmed_admissions_flu_ew\",     \"covid\" = \"confirmed_admissions_covid_ew\",     \"rsv\" = \"confirmed_admissions_rsv_ew\"   )   signal <- signal_map[[forecast_disease]]    # Call epidatr to get the data   epidata <- epidatr::pub_covidcast(     source = \"nhsn\",     signals = signal,     geo_type = \"state\",     time_type = \"week\",     geo_values = tolower(geo_values),     issues = \"*\"   ) ## Warning: No API key found. You will be limited to non-complex queries and encounter rate ## limits if you proceed. ## ℹ See `?save_api_key()` for details on obtaining and setting API keys. ## This warning is displayed once every 8 hours. target_data <- epidata |>     select(       location = geo_value,       reference_date = time_value,       report_date = issue,       confirm = value     ) |>     epinowcast::enw_filter_report_dates(latest_date = eval_date) |>     epinowcast::enw_filter_reference_dates(latest_date = nowcast_date)        target_data$report_date %>% unique() ##  [1] \"2024-11-17\" \"2024-11-24\" \"2024-12-01\" \"2024-12-08\" \"2024-12-15\" ##  [6] \"2024-12-22\" \"2024-12-29\" \"2025-01-05\" \"2025-01-12\" \"2025-01-19\" ## [11] \"2025-01-26\" \"2025-02-02\" \"2025-02-09\" \"2025-02-16\" \"2025-02-23\" ## [16] \"2025-03-02\" \"2025-03-09\" \"2025-03-16\" target_data ##       location reference_date report_date confirm ##         <char>         <IDat>      <IDat>   <num> ##    1:       md     2020-08-02  2024-11-17      NA ##    2:       md     2020-08-02  2024-11-24      NA ##    3:       md     2020-08-02  2024-12-01      NA ##    4:       md     2020-08-02  2024-12-08      NA ##    5:       md     2020-08-02  2024-12-15      NA ##   ---                                             ## 4171:       md     2025-02-09  2025-02-16    1035 ## 4172:       md     2025-02-09  2025-02-23    1081 ## 4173:       md     2025-02-09  2025-03-02    1081 ## 4174:       md     2025-02-09  2025-03-09    1081 ## 4175:       md     2025-02-09  2025-03-16    1081 observed_data <- epinowcast::enw_filter_report_dates(target_data, latest_date = nowcast_date) obs_by_reference <- epinowcast::enw_latest_data(observed_data)  latest_data <- epinowcast::enw_latest_data(target_data) |>   epinowcast::enw_filter_reference_dates(latest_date = max(observed_data$reference_date)) obs_data_by_reference_date <- epinowcast::enw_latest_data(observed_data)  plot_data <- ggplot() +   geom_line(     data = obs_data_by_reference_date,     aes(x = reference_date, y = confirm), color = \"darkred\"   ) +   geom_line(     data = latest_data,     aes(x = reference_date, y = confirm), color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(signal) +   #scale_y_continuous(trans = \"log10\") +   xlim(as.Date(\"2024-11-01\"), as.Date(nowcast_date))   ggtitle(\"Comparing real-time and later observed cases\") ## <ggplot2::labels> List of 1 ##  $ title: chr \"Comparing real-time and later observed cases\" plot_data ## Warning: Removed 222 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 222 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"visualizing-all-versions-on-the-same-plot","dir":"Articles","previous_headings":"Retrieve and Prepare Surveillance Data","what":"Visualizing all versions on the same plot","title":"2b: Introduction to panel data versioning and nowcasting","text":"Now let’s create plot showing different report date versions different colors graph. helps us understand data evolved time new reports came .  plot shows reported values reference date changed time complete data became available. Earlier versions (earlier colors legend) show lower values due reporting delays, later versions show progressively higher complete counts.","code":"# Get all unique report dates to create snapshots all_report_dates <- target_data %>%   pull(report_date) %>%   unique() %>%   sort()  # Create a dataframe with the latest data available as of each report date # Using epinowcast::enw_latest_data() to properly get the latest value for each reference date all_versions <- map_dfr(all_report_dates, function(rd) {   target_data %>%     epinowcast::enw_filter_report_dates(latest_date = rd) %>%     epinowcast::enw_latest_data() %>%     mutate(version = rd) })  # Create plot with all versions in different colors ggplot(all_versions, aes(x = reference_date, y = confirm, color = as.factor(version))) +   geom_line(linewidth = 0.8) +   theme_bw() +   xlab(\"Reference date\") +   ylab(signal) +   labs(     title = \"All Data Versions by Report Date\",     subtitle = \"Each color represents the data as it appeared on a different report date\",     color = \"Report Date\"   ) +   scale_color_viridis_d(option = \"D\", end = 0.9) +   theme(legend.position = \"right\",         legend.key.height = unit(0.4, \"cm\")) +   xlim(as.Date(\"2024-11-01\"), as.Date(nowcast_date)) ## Warning: Removed 3996 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"build-the-reporting-triangle","dir":"Articles","previous_headings":"","what":"Build the Reporting Triangle","title":"2b: Introduction to panel data versioning and nowcasting","text":"Restrict data training window construct reporting triangle, stores rows reference weeks columns reporting delays. Next use epinowcast function, epinowcast::enw_filter_reference_dates() filter include n_training_volume days historical data, epinowcast function epinowcast::enw_latest_data() used filter latest available reported total counts reference date. Finally obtain data want evaluate forecasts , use epinowcast::enw_filter_reference_dates() applied target_data, filter n_training_volume days historical data. Look output triangle, notice ? Inspect reporting triangle using heat map. , grey indicates matrix elements NA, expect case bottom right portion reporting triangle counts yet observed.","code":"# Empirical data outside this delay window will not be used for training max_delay <- 4 # weeks n_training_volume <- 8*7 # days (30 weeks) training_data <- epinowcast::enw_filter_reference_dates(observed_data, include_days = n_training_volume)  latest_training_data <- epinowcast::enw_latest_data(training_data)  eval_data <- epinowcast::enw_filter_reference_dates(latest_data, include_days = n_training_volume-1) pobs <- epinowcast::enw_preprocess_data(   obs = training_data,   max_delay = max_delay+2,   timestep=\"week\",   set_negatives_to_zero = TRUE ) ## Warning: The coverage of the specified maximum delay could not be reliably checked. ## • There are only very few (4) reference dates that are sufficiently far in the ##   past (more than 27 days) to compute coverage statistics for the maximum ##   delay. ## • You can test different maximum delays and obtain coverage statistics using ##   the function check_max_delay() (`?epinowcast::check_max_delay()`). reporting_triangle_df <- select(   pobs$new_confirm[[1]],   reference_date,   delay,   new_confirm )  reporting_triangle <- reporting_triangle_df |>   pivot_wider(names_from = delay, values_from = new_confirm) |>   select(-reference_date) |>   as.matrix()  reporting_triangle[is.na(reporting_triangle)] <- 0  reporting_triangle ##        0  1 2 3 4 ## [1,]  94 37 0 0 0 ## [2,] 134 44 0 0 0 ## [3,] 367 40 0 0 0 ## [4,] 366  0 0 6 0 ## [5,] 459  0 0 0 0 ## [6,] 582  0 0 0 0 ## [7,] 770 40 0 0 0 ## [8,] 962  0 0 0 0 #### code to plot: triangle_df <- as.data.frame(reporting_triangle) |>   mutate(time = row_number()) |>   pivot_longer(!time,     values_to = \"count\",     names_prefix = \"V\",     names_to = \"delay\"   ) |>   mutate(delay = as.numeric(delay))  plot_triangle <- ggplot(   triangle_df,   aes(x = delay, y = time, fill = count) ) +   geom_tile() +   scale_fill_gradient(low = \"white\", high = \"red\") +   labs(title = \"Reporting triangle\", x = \"Delay\", y = \"Time\") +   theme_bw() +   scale_y_reverse()  plot_triangle"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"estimate-delay-and-generate-point-nowcasts","dir":"Articles","previous_headings":"","what":"Estimate Delay and Generate Point Nowcasts","title":"2b: Introduction to panel data versioning and nowcasting","text":"use half available reference weeks estimate delay distribution reserve remaining weeks evaluation. Let’s plot distribution delays","code":"# most recent 50% of the reference times for delay estimation n_history_delay <- as.integer(0.5 * n_training_volume) # days  delay_pmf <- baselinenowcast::estimate_delay(   reporting_triangle = reporting_triangle,   max_delay = max_delay,   n = n_history_delay/7 )   delay_df <- data.frame(   delay = 0:(length(delay_pmf) - 1),   pmf = delay_pmf )  delay_cdf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = cumsum(pmf))) +   xlab(\"Delay\") +   ylab(\"Cumulative proportion reported\") +   ggtitle(\"Empirical point estimate of cumulative proportion reported by delay\") + # nolint   theme_bw()  delay_pmf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = pmf)) +   xlab(\"Delay\") +   ylab(\"Proportion reported\") +   ggtitle(\"Empirical point estimate of proportion reported by delay\") +   theme_bw() delay_cdf_plot delay_pmf_plot"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"apply-the-delay-to-generate-a-point-nowcast","dir":"Articles","previous_headings":"","what":"Apply the delay to generate a point nowcast","title":"2b: Introduction to panel data versioning and nowcasting","text":"observe, example disappointing, example point nowcast (blue) sits almost exactly top real-time observations (red). behaviour aligns estimated delay distribution, places nearly probability mass zero-week delay recent reference times. Unfortunately, NHSN signal currently exposed via Epidata stores revisions back late 2024-11-17, draw longer training history expose weeks notable late reports. Indeed, nowcasting beneficial longer history data (unfortnuataly epidata store NHSN issues 2024-11-17), better nowcasting nodels. see larger adjustments, experiment locations, earlier nowcast dates, datasets contain richer revision patterns (example Robert Koch Institute line list available Germany Nowcasting Hub).","code":"point_nowcast_matrix <- baselinenowcast::apply_delay(   reporting_triangle = reporting_triangle,   delay_pmf = delay_pmf )  point_nowcast_df <- eval_data |>   mutate(nowcast = rowSums(point_nowcast_matrix))  prep_latest_data <- latest_training_data |>   mutate(type = \"Real-time data\") |>   select(type, reference_date, count = confirm) # Combine data into a single dataframe for plotting plot_data <- point_nowcast_df |>   pivot_longer(     cols = c(confirm, nowcast),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"confirm\" ~ \"Final observed data\",     type == \"nowcast\" ~ \"Point nowcast\",     TRUE ~ type   )) |>   bind_rows(prep_latest_data)  # Create plot with data type as a variable plot_pt_nowcast <- ggplot(plot_data, aes(   x = reference_date,   y = count,   color = type,   linetype = type )) +   geom_line() +   scale_color_manual(values = c(     \"Real-time data\" = \"darkred\",     \"Final observed data\" = \"black\",     \"Point nowcast\" = \"darkblue\"   )) +   scale_linetype_manual(values = c(     \"Real-time data\" = \"dashed\",     \"Final observed data\" = \"dashed\",     \"Point nowcast\" = \"solid\"   )) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   #scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time, nowcasted, and later observed cases\") +   theme(legend.position = \"bottom\") +   labs(color = \"Type\", linetype = \"Type\") plot_pt_nowcast"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"2b: Introduction to panel data versioning and nowcasting","text":"Use baselinenowcast::estimate_and_apply_uncertainty() obtain probabilistic nowcast intervals need calibrated uncertainty estimates. Adjust training window (n_training_weeks) max_delay match reporting dynamics diseases locations. Explore model variants documented baselinenowcast vignette stratified data alternative delay models.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"a-more-interesting-example","dir":"Articles","previous_headings":"","what":"a more interesting example","title":"2b: Introduction to panel data versioning and nowcasting","text":"section follow closely Getting started baselinenowcast package","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"dataset","dir":"Articles","previous_headings":"a more interesting example","what":"Dataset","title":"2b: Introduction to panel data versioning and nowcasting","text":"work interesting dataset: daily level data Robert Koch Institute via Germany Nowcasting hub. data represent hospital admission counts date positive test date test report Germany October 1, 2021. Filter data just look national-level data, age groups. pretend making nowcast August 1, 2021, therefore exclude reference dates report dates date. germany_covid19_hosp provided package data epinowcast","code":"nowcast_date <- \"2021-08-01\" eval_date <- \"2021-10-01\"  target_data <- epinowcast::germany_covid19_hosp[location == \"DE\"][age_group == \"00+\"] |>   epinowcast::enw_filter_report_dates(latest_date = eval_date) |>   epinowcast::enw_filter_reference_dates(     latest_date = nowcast_date   ) latest_data <- epinowcast::enw_latest_data(target_data) observed_data <- epinowcast::enw_filter_report_dates(   target_data,   latest_date = nowcast_date )  head(observed_data) ##    reference_date location age_group confirm report_date ##            <IDat>   <fctr>    <fctr>   <int>      <IDat> ## 1:     2021-04-06       DE       00+     149  2021-04-06 ## 2:     2021-04-07       DE       00+     312  2021-04-07 ## 3:     2021-04-08       DE       00+     424  2021-04-08 ## 4:     2021-04-09       DE       00+     288  2021-04-09 ## 5:     2021-04-10       DE       00+     273  2021-04-10 ## 6:     2021-04-11       DE       00+     107  2021-04-11 obs_data_by_reference_date <- epinowcast::enw_latest_data(observed_data) plot_data <- ggplot() +   geom_line(     data = obs_data_by_reference_date,     aes(x = reference_date, y = confirm), color = \"darkred\"   ) +   geom_line(     data = latest_data,     aes(x = reference_date, y = confirm), color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time and later observed cases\") plot_data"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"visualizing-all-versions-on-the-same-plot-germany-data","dir":"Articles","previous_headings":"a more interesting example","what":"Visualizing all versions on the same plot (Germany data)","title":"2b: Introduction to panel data versioning and nowcasting","text":"Let’s create visualization Germany dataset, showing different report date versions different colors.  visualization much interesting Germany dataset! can clearly see reported values evolved significantly time, substantial revisions occurring complete data became available.","code":"# Get report dates - sample monthly to avoid too many versions all_report_dates_germany <- target_data %>%   pull(report_date) %>%   unique() %>%   sort()  # Select only the first day of each month (or closest available date) monthly_report_dates <- all_report_dates_germany %>%   as.Date() %>%   tibble(date = .) %>%   mutate(year_month = format(date, \"%Y-%m\")) %>%   group_by(year_month) %>%   slice_min(date, n = 1) %>%   pull(date)  # Create a dataframe with the latest data available as of each monthly report date # Using epinowcast::enw_latest_data() to properly get the latest value for each reference date all_versions_germany <- map_dfr(monthly_report_dates, function(rd) {   target_data %>%     epinowcast::enw_filter_report_dates(latest_date = rd) %>%     epinowcast::enw_latest_data() %>%     mutate(version = rd) })  # Create plot with all versions in different colors ggplot(all_versions_germany, aes(x = reference_date, y = confirm, color = as.factor(version))) +   geom_line(linewidth = 0.8) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   labs(     title = \"All Data Versions by Report Date (Germany COVID-19)\",     subtitle = \"Monthly snapshots showing how the data evolved over time\",     color = \"Report Date\"   ) +   scale_color_viridis_d(option = \"D\", end = 0.9) +   scale_y_continuous(trans = \"log10\") +   theme(legend.position = \"right\",         legend.key.height = unit(0.4, \"cm\"))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"lets-build-the-reporting-triangle","dir":"Articles","previous_headings":"a more interesting example","what":"Let’s build the reporting triangle","title":"2b: Introduction to panel data versioning and nowcasting","text":"Much interesting !!","code":"max_delay <- 30 n_training_volume <- 3 * max_delay n_history_delay <- as.integer(0.5 * n_training_volume) training_data <- epinowcast::enw_filter_reference_dates(   observed_data,   include_days = n_training_volume - 1 ) latest_training_data <- epinowcast::enw_latest_data(training_data) eval_data <- epinowcast::enw_filter_reference_dates(   latest_data,   include_days = n_training_volume - 1 ) pobs <- epinowcast::enw_preprocess_data(   obs = training_data,   max_delay = max_delay + 1 ) reporting_triangle_df <- select(   pobs$new_confirm[[1]],   reference_date,   delay,   new_confirm ) reporting_triangle <- reporting_triangle_df |>   pivot_wider(names_from = delay, values_from = new_confirm) |>   select(-reference_date) |>   as.matrix() triangle_df <- as.data.frame(reporting_triangle) |>   mutate(time = row_number()) |>   pivot_longer(!time,     values_to = \"count\",     names_prefix = \"V\",     names_to = \"delay\"   ) |>   mutate(delay = as.numeric(delay))  plot_triangle <- ggplot(   triangle_df,   aes(x = delay, y = time, fill = count) ) +   geom_tile() +   scale_fill_gradient(low = \"white\", high = \"blue\") +   labs(title = \"Reporting triangle\", x = \"Delay\", y = \"Time\") +   theme_bw() +   scale_y_reverse() plot_triangle"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"lets-estimate-the-delay","dir":"Articles","previous_headings":"a more interesting example","what":"Let’s estimate the delay","title":"2b: Introduction to panel data versioning and nowcasting","text":"","code":"delay_pmf <- estimate_delay(   reporting_triangle = reporting_triangle,   max_delay = max_delay,   n = n_history_delay ) delay_df <- data.frame(   delay = 0:(length(delay_pmf) - 1),   pmf = delay_pmf )  delay_cdf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = cumsum(pmf))) +   xlab(\"Delay\") +   ylab(\"Cumulative proportion reported\") +   ggtitle(\"Empirical point estimate of cumulative proportion reported by delay\") + # nolint   theme_bw()  delay_pmf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = pmf)) +   xlab(\"Delay\") +   ylab(\"Proportion reported\") +   ggtitle(\"Empirical point estimate of proportion reported by delay\") +   theme_bw() delay_cdf_plot delay_pmf_plot"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"generate-nowcast-with-delay","dir":"Articles","previous_headings":"a more interesting example","what":"Generate nowcast with delay","title":"2b: Introduction to panel data versioning and nowcasting","text":"","code":"point_nowcast_matrix <- baselinenowcast::apply_delay(   reporting_triangle = reporting_triangle,   delay_pmf = delay_pmf ) point_nowcast_df <- eval_data |>   mutate(nowcast = rowSums(point_nowcast_matrix))  prep_latest_data <- latest_training_data |>   mutate(type = \"Real-time data\") |>   select(type, reference_date, count = confirm) # Combine data into a single dataframe for plotting plot_data <- point_nowcast_df |>   pivot_longer(     cols = c(confirm, nowcast),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"confirm\" ~ \"Final observed data\",     type == \"nowcast\" ~ \"Point nowcast\",     TRUE ~ type   )) |>   bind_rows(prep_latest_data)  # Create plot with data type as a variable plot_pt_nowcast <- ggplot(plot_data, aes(   x = reference_date,   y = count,   color = type )) +   geom_line() +   scale_color_manual(values = c(     \"Real-time data\" = \"darkred\",     \"Final observed data\" = \"black\",     \"Point nowcast\" = \"darkblue\"   )) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time, nowcasted, and later observed cases\") +   theme(legend.position = \"bottom\") +   labs(color = \"Type\") plot_pt_nowcast"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"estimate-uncertainy","dir":"Articles","previous_headings":"a more interesting example","what":"Estimate uncertainy","title":"2b: Introduction to panel data versioning and nowcasting","text":"uncertainty estimation, generate retrospective nowcast datasets recent 50% reference times.","code":"n_retrospective_nowcasts <- as.integer(0.5 * n_training_volume)   trunc_rep_tri_list <- baselinenowcast::truncate_triangles(reporting_triangle,   n = n_retrospective_nowcasts ) retro_rep_tri_list <- baselinenowcast::construct_triangles(trunc_rep_tri_list)  retro_pt_nowcast_mat_list <- baselinenowcast::fill_triangles(   retro_reporting_triangles = retro_rep_tri_list,   n = n_history_delay )  disp_params <- baselinenowcast::estimate_uncertainty(   point_nowcast_matrices = retro_pt_nowcast_mat_list,   truncated_reporting_triangles = trunc_rep_tri_list,   retro_reporting_triangles = retro_rep_tri_list,   n = n_retrospective_nowcasts ) nowcast_draws_df <- baselinenowcast::sample_nowcasts(   point_nowcast_matrix, reporting_triangle,   uncertainty_params = disp_params,   draws = 100 )  head(nowcast_draws_df) ##   pred_count time draw ## 1        736    1    1 ## 2        897    2    1 ## 3        893    3    1 ## 4        804    4    1 ## 5        722    5    1 ## 6        492    6    1"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"vizualize-probablistic-nowcast","dir":"Articles","previous_headings":"a more interesting example","what":"Vizualize probablistic nowcast","title":"2b: Introduction to panel data versioning and nowcasting","text":"","code":"latest_data_prepped <- latest_training_data |>   mutate(time = row_number()) |>   rename(obs_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) # Prepare the final evaluation data so we can combine the datasets.  final_data_prepped <- eval_data |>   select(reference_date, final_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) # Join the nowcasts, data as of the nowcast date, and the final data. obs_with_nowcast_draws_df <- nowcast_draws_df |>   left_join(latest_data_prepped, by = \"time\") |>   left_join(final_data_prepped, by = \"reference_date\") head(obs_with_nowcast_draws_df) ##   pred_count time draw reference_date location age_group obs_confirm ## 1        736    1    1     2021-05-04       DE       00+         823 ## 2        897    2    1     2021-05-05       DE       00+        1028 ## 3        893    3    1     2021-05-06       DE       00+        1016 ## 4        804    4    1     2021-05-07       DE       00+         892 ## 5        722    5    1     2021-05-08       DE       00+         822 ## 6        492    6    1     2021-05-09       DE       00+         561 ##   report_date final_confirm ## 1  2021-07-24           823 ## 2  2021-07-25          1028 ## 3  2021-07-26          1016 ## 4  2021-07-27           892 ## 5  2021-07-28           822 ## 6  2021-07-29           561 # Create a separate dataframe for only the observed and final data, to make plotting easier. combined_data <- obs_with_nowcast_draws_df |>   select(reference_date, obs_confirm, final_confirm) |>   distinct() |>   pivot_longer(     cols = c(obs_confirm, final_confirm),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"obs_confirm\" ~ \"Observed data\",     type == \"final_confirm\" ~ \"Final observed data\"   ))   # Plot with draws for nowcast only plot_prob_nowcast <- ggplot() +   # Add nowcast draws as thin gray lines   geom_line(     data = obs_with_nowcast_draws_df,     aes(       x = reference_date, y = pred_count, group = draw,       color = \"Nowcast draw\", linewidth = \"Nowcast draw\"     )   ) +   # Add observed data and final data once   geom_line(     data = combined_data,     aes(       x = reference_date,       y = count,       color = type,       linewidth = type     )   ) +   theme_bw() +   scale_color_manual(     values = c(       \"Nowcast draw\" = \"gray\",       \"Observed data\" = \"darkred\",       \"Final observed data\" = \"black\"     ),     name = \"\"   ) +   scale_linewidth_manual(     values = c(       \"Nowcast draw\" = 0.2,       \"Observed data\" = 1,       \"Final observed data\" = 1     ),     name = \"\"   ) +   scale_y_continuous(trans = \"log10\") +   xlab(\"Reference date\") +   ylab(\"Hospital admissions\") +   theme(legend.position = \"bottom\") +   ggtitle(\"Comparison of admissions as of the nowcast date, later observed counts, \\n and probabilistic nowcasted counts\") # nolint plot_prob_nowcast"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/02.1-nowcasting-demo.html","id":"more-ressources","dir":"Articles","previous_headings":"","what":"More ressources:","title":"2b: Introduction to panel data versioning and nowcasting","text":"Paulo Ventura’s archived NHSN exports: https://paulocv.github.io/respiratory_archive/ baselinenowcast getting started guide: https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html (accompanying paper: https://www.medrxiv.org/content/10.1101/2025.08.14.25333653v2) epinowcast introduction principled hierarchical nowcasting models: https://package.epinowcast.org/articles/epinowcast.html Delphi Insight Net Workshop 2024 slide decks (see first two sessions): https://cmu-delphi.github.io/insightnet-workshop-2024. nowcasting done using scaling methods, using another set software tools SISMID NFIDD course notes nowcasting: https://nfidd.github.io/sismid/ Lison et al. review nowcasting literature: https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1012021","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"set-parameters","dir":"Articles","previous_headings":"Setup","what":"Set parameters","title":"3. Forecasting with Time Series Models","text":"","code":"state_name <- \"Maryland\" geo_ids <- \"md\" forecast_date <- as.Date(\"2024-12-01\") forecast_disease <- \"influenza\" target <- \"wk inc flu hosp\" forecast_horizon_wks <- 0:3"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"load-packages","dir":"Articles","previous_headings":"Setup","what":"Load packages","title":"3. Forecasting with Time Series Models","text":"","code":"knitr::opts_chunk$set(echo = TRUE)  library(AMPHForecastSuite) library(tidyverse) library(forecast) library(jsonlite) library(epidatr) library(epipredict) library(epiprocess) library(ggplot2) library(dplyr)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"load-target-observed-data","dir":"Articles","previous_headings":"Setup","what":"Load target (observed) data","title":"3. Forecasting with Time Series Models","text":"already pulled saved data need Collect Empirical Data. See vignettes/collect_empirical_data.Rmd details.","code":"# Load data saved from a specific forecast date:  target_data_path <- file.path(\"target-data\", paste0(\"target-hospital-admissions-\", forecast_date, \".csv\"))  target_data <- readr::read_csv(file = target_data_path) %>%   mutate(location = as.character(location)) %>%   dplyr::filter(!is.na(observation)) %>%        # keep rows with observed values   dplyr::arrange(dplyr::across(dplyr::any_of(c(\"target_end_date\",\"date\"))))    # get location id to add to forecast output location_dat <- target_data %>%   dplyr::select(location, abbreviation, location_name) %>%   distinct()  location <- as.character(location_dat$location)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"define-reference-date","dir":"Articles","previous_headings":"Setup","what":"Define Reference date","title":"3. Forecasting with Time Series Models","text":"reference_date Saturday week forecast date. date used forecast submission file.","code":"reference_date <- get_reference_date(forecast_date) ## Reference date: 2024-12-07 ## Forecast date: 2024-12-01"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"sarima-forecast-package","dir":"Articles","previous_headings":"Models","what":"SARIMA (forecast package)","title":"3. Forecasting with Time Series Models","text":"use auto.arima function forecast package fit seasonal ARIMA model data (seasonal = T). Use (seasonal = F) remove seasonality.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"set-the-name","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Set the name","title":"3. Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-sarima\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"run-the-model","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Run the model","title":"3. Forecasting with Time Series Models","text":"","code":"fc_sarima <- forecast::auto.arima(y = target_data$observation,                                    seasonal = T,                                    lambda = \"auto\") %>%   forecast::forecast(h = length(forecast_horizon_wks),            level = c(.1, .2, .3, .4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98)) ## Warning in guerrero(x, lower, upper): Guerrero's method for selecting a Box-Cox ## parameter (lambda) is given for strictly positive data."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"plot-sarima-forecast-results","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Plot SARIMA forecast results","title":"3. Forecasting with Time Series Models","text":"SARIMA model fit forecast","code":"# Build data for plotting h <- length(forecast_horizon_wks)  # dates for history + horizon (uses target_end_date if present; else index) hist_dates <- if (\"target_end_date\" %in% names(target_data)) as.Date(target_data$target_end_date) else seq_len(nrow(target_data)) fc_dates   <- if (is.Date(hist_dates)) max(hist_dates) + 7L*seq_len(h) else max(hist_dates) + seq_len(h)  df_hist <- data.frame(date = hist_dates, value = target_data$observation)  pick <- function(mat, lvl){   nm <- paste0(lvl, \"%\")   if (!is.null(colnames(mat)) && nm %in% colnames(mat)) mat[, nm] else mat[, ncol(mat)] }  df_fc <- data.frame(   date = fc_dates,   mean = as.numeric(fc_sarima$mean),   l80  = as.numeric(pick(fc_sarima$lower, 80)),   u80  = as.numeric(pick(fc_sarima$upper, 80)),   l95  = as.numeric(pick(fc_sarima$lower, 95)),   u95  = as.numeric(pick(fc_sarima$upper, 95)) )  # keep only the last 10 observed points to view most recent data df_hist_last <- df_hist %>% arrange(date) %>% slice_tail(n = 10)  # x-range: last observed window through end of forecast x_start <- min(df_hist_last$date) x_end   <- max(df_fc$date)  ggplot() +   geom_point(data = df_hist_last, aes(date, value)) +   geom_ribbon(data = df_fc, aes(date, ymin = l95, ymax = u95), alpha = 0.15) +   geom_ribbon(data = df_fc, aes(date, ymin = l80, ymax = u80), alpha = 0.25) +   geom_line(data = df_fc, aes(date, mean)) +   coord_cartesian(xlim = c(x_start, x_end)) +   labs(title = \"SARIMA model fit and forecast\",        x = \"Date\", y = \"Hospital admissions\") +   theme_minimal(base_size = 12)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"check-that-the-model-output-is-in-the-correct-format-","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Check that the model output is in the correct format.","title":"3. Forecasting with Time Series Models","text":"use hubValidations package check tasks.json file create Getting Started.","code":"# Future functionality. Not yet developed."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"save-in-hubverse-format","dir":"Articles","previous_headings":"Models > SARIMA (forecast package)","what":"Save in hubVerse Format","title":"3. Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_sarima <- trans_forecastpkg_hv(fc_output = fc_sarima,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks,                                      geo_ids = location)   ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_sarima,                   reference_date) ## Model output saved to model-output/AMPH-sarima/2024-12-07-AMPH-sarima.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"neural-network-model-forecast-package","dir":"Articles","previous_headings":"Models","what":"Neural network model (forecast package)","title":"3. Forecasting with Time Series Models","text":"use nnetar function forecast package fit neural network model data.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"set-the-name-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Set the name","title":"3. Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-neuralnetwork\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"run-the-model-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Run the model","title":"3. Forecasting with Time Series Models","text":"","code":"fc_nnet <- forecast::nnetar(target_data$observation,                              lambda = \"auto\") %>%   forecast(PI = TRUE,            h = length(forecast_horizon_wks),            level = c(.1, .2, .3, .4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98)) ## Warning in guerrero(x, lower, upper): Guerrero's method for selecting a Box-Cox ## parameter (lambda) is given for strictly positive data."},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"plot-neural-network-forecast-results","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Plot Neural Network forecast results","title":"3. Forecasting with Time Series Models","text":"Neural network model fit forecast","code":"df_fc <- data.frame(   date = fc_dates,   mean = as.numeric(fc_nnet$mean),   l80  = as.numeric(pick(fc_nnet$lower, 80)),   u80  = as.numeric(pick(fc_nnet$upper, 80)),   l95  = as.numeric(pick(fc_nnet$lower, 95)),   u95  = as.numeric(pick(fc_nnet$upper, 95)) )  ggplot() +   geom_point(data = df_hist_last, aes(date, value)) +   geom_ribbon(data = df_fc, aes(date, ymin = l95, ymax = u95), alpha = 0.15) +   geom_ribbon(data = df_fc, aes(date, ymin = l80, ymax = u80), alpha = 0.25) +   geom_line(data = df_fc, aes(date, mean)) +   coord_cartesian(xlim = c(x_start, x_end)) +   labs(title = \"Neural network model fit and forecast\",        x = \"Date\", y = \"Hospital admissions\") +   theme_minimal(base_size = 12)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"save-in-hubverse-format-1","dir":"Articles","previous_headings":"Models > Neural network model (forecast package)","what":"Save in hubVerse Format","title":"3. Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_nnet <- trans_forecastpkg_hv(fc_output = fc_nnet,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks,                                      geo_ids = location)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_nnet,                   reference_date) ## Model output saved to model-output/AMPH-neuralnetwork/2024-12-07-AMPH-neuralnetwork.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"autoregressive-forecaster-epipredict-package","dir":"Articles","previous_headings":"Models","what":"Autoregressive Forecaster (epipredict package)","title":"3. Forecasting with Time Series Models","text":"use epipredict package fit autoregressive model data. specify lags 0, 7, 14 days (.e., current week, previous week, two weeks ago) forecast horizons 7, 14, 21, 28 days ahead (.e., 1 4 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"set-the-name-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Set the name","title":"3. Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-epipredict-arx\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"run-the-model-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Run the model","title":"3. Forecasting with Time Series Models","text":"ARX model fit forecast","code":"# Set up data for epipredict target_data_arx <- target_data %>%   rename(geo_value = location,          time_value = target_end_date,          value = observation) %>%   tsibble::as_tsibble(index = time_value, key = c(geo_value)) %>%   arrange(geo_value, time_value) %>%   epiprocess::as_epi_df()  # Run model arx_forecast <- lapply(   seq(7, 28, 7),   function(days_ahead) {     epipredict::arx_forecaster(       epi_data = target_data_arx,        outcome = \"value\",       trainer = linear_reg(),       predictors = \"value\",       args_list = arx_args_list(         lags = list(c(0, 7, 14)),         ahead = days_ahead,         quantile_levels = c(0.01, 0.025,                             0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35,                             0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,                             0.75, 0.8, 0.85, 0.9, 0.95,                             0.975, 0.99),         nonneg = TRUE       )     )   } ) # pull out the workflow and the predictions to be able to effectively use autoplot arx_forecaster_workflow <- arx_forecast[[1]]$epi_workflow arx_forecaster_results <- arx_forecast %>%   purrr::map(~ `$`(., \"predictions\")) %>%   list_rbind() %>%   mutate(horizon = forecast_horizon_wks,          location_id = state_name,          model = model_name,          target = target) autoplot(   object = arx_forecaster_workflow,   predictions = arx_forecaster_results,   observed_response = target_data_arx %>%     filter(geo_value %in% geo_ids, time_value > (lubridate::as_date(forecast_date) - 4*30))) +   geom_vline(aes(xintercept = forecast_date))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"save-in-hubverse-format-2","dir":"Articles","previous_headings":"Models > Autoregressive Forecaster (epipredict package)","what":"Save in hubVerse Format","title":"3. Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_arx_epipred <- trans_epipredarx_hv(fc_output = arx_forecast,                                            model_name = model_name,                                            target = target,                                            reference_date = reference_date,                                            horizon_time_steps = forecast_horizon_wks)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_arx_epipred,                   reference_date) ## Model output saved to model-output/AMPH-epipredict-arx/2024-12-07-AMPH-epipredict-arx.csv"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"climatological-forecaster-epipredict-package","dir":"Articles","previous_headings":"Models","what":"Climatological Forecaster (epipredict package)","title":"3. Forecasting with Time Series Models","text":"use epipredict package fit climatological model data. specify forecast horizon 7, 14, 21, 28 days ahead (.e., 1 4 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"set-the-name-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Set the name","title":"3. Forecasting with Time Series Models","text":"","code":"model_name <- \"AMPH-epipredict-climate\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"run-the-model-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Run the model","title":"3. Forecasting with Time Series Models","text":"Climate model fit forecast","code":"# Set up data for epipredict target_data_clim <- target_data %>%   rename(geo_value = location,          time_value = target_end_date,          value = observation) %>%   tsibble::as_tsibble(index = time_value, key = c(geo_value)) %>%   arrange(geo_value, time_value) %>%   epiprocess::as_epi_df()  # Run the model climate_forecast <- epipredict::climatological_forecaster(   target_data_clim,   outcome = \"value\",   args_list = climate_args_list(     forecast_horizon = forecast_horizon_wks,     time_type = \"week\",         quantile_levels = c(0.01, 0.025,                             0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35,                             0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,                             0.75, 0.8, 0.85, 0.9, 0.95,                             0.975, 0.99),     center_method = \"median\",     quantile_by_key = \"geo_value\",     forecast_date = reference_date,     nonneg = TRUE   ) ) climate_forecast_workflow <- climate_forecast$epi_workflow climate_forecast_results <- climate_forecast$predictions %>%   mutate(horizon = forecast_horizon_wks,          location_id = state_name,          model = model_name,          target = target) autoplot(   object = climate_forecast_workflow,   predictions = climate_forecast_results,   observed_response = target_data_clim %>%     filter(geo_value %in% geo_ids, time_value > (lubridate::as_date(forecast_date) - 4*30))) +   geom_vline(aes(xintercept = forecast_date))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/03-times-series-models.html","id":"save-in-hubverse-format-3","dir":"Articles","previous_headings":"Models > Climatological Forecaster (epipredict package)","what":"Save in hubVerse Format","title":"3. Forecasting with Time Series Models","text":"","code":"# Transform to hubVerse format data_fc_climate_epipred <- trans_epipredclim_hv(fc_output = climate_forecast,                                      model_name = model_name,                                      target = target,                                      reference_date = reference_date,                                      horizon_time_steps = forecast_horizon_wks)  ## Save data file #' -- this will have validation build in for fluid workflow eventually. save_model_output(model_name = model_name,                   fc_output = data_fc_climate_epipred,                   reference_date) ## Model output saved to model-output/AMPH-epipredict-climate/2024-12-07-AMPH-epipredict-climate.csv"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"setup","dir":"Articles","previous_headings":"","what":"1) Setup","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"Install & load required R packages","code":"library(AMPHForecastSuite) library(hubEnsembles) library(hubUtils) library(hubVis) library(scoringutils) library(dplyr) library(purrr) library(ggplot2) library(jsonlite) library(readr) library(tidyr) library(scales)  reference_date <- get_reference_date(forecast_date)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"get-flusight-data-repo","dir":"Articles","previous_headings":"","what":"2) Get FluSight data repo","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"FluSight Github repository stores forecast data FluSight Influenza Forecasting Hub, run US CDC. project collects forecasts weekly new hospitalizations due confirmed influenza. information can found ReadMe repository: https://github.com/cdcepi/FluSight-forecast-hub. copy set forecasts repository, use build simple ensemble, visualize forecasts, score observed data. switch different forecasting hub, change disease argument clone_hub_repos() function .","code":"repo_dir <- clone_hub_repos(disease = forecast_disease,                             clone_dir = getwd()) ## Cloning repository... ## Cloning into 'FluSight-forecast-hub'... ## Updating files:  36% (1004/2714)Updating files:  37% (1005/2714)Updating files:  38% (1032/2714)Updating files:  39% (1059/2714)Updating files:  40% (1086/2714)Updating files:  41% (1113/2714)Updating files:  42% (1140/2714)Updating files:  43% (1168/2714)Updating files:  44% (1195/2714)Updating files:  45% (1222/2714)Updating files:  46% (1249/2714)Updating files:  47% (1276/2714)Updating files:  48% (1303/2714)Updating files:  49% (1330/2714)Updating files:  50% (1357/2714)Updating files:  51% (1385/2714)Updating files:  52% (1412/2714)Updating files:  53% (1439/2714)Updating files:  54% (1466/2714)Updating files:  55% (1493/2714)Updating files:  56% (1520/2714)Updating files:  57% (1547/2714)Updating files:  58% (1575/2714)Updating files:  59% (1602/2714)Updating files:  60% (1629/2714)Updating files:  61% (1656/2714)Updating files:  62% (1683/2714)Updating files:  63% (1710/2714)Updating files:  64% (1737/2714)Updating files:  65% (1765/2714)Updating files:  66% (1792/2714)Updating files:  67% (1819/2714)Updating files:  68% (1846/2714)Updating files:  69% (1873/2714)Updating files:  69% (1897/2714)Updating files:  70% (1900/2714)Updating files:  71% (1927/2714)Updating files:  72% (1955/2714)Updating files:  73% (1982/2714)Updating files:  74% (2009/2714)Updating files:  75% (2036/2714)Updating files:  76% (2063/2714)Updating files:  77% (2090/2714)Updating files:  78% (2117/2714)Updating files:  79% (2145/2714)Updating files:  80% (2172/2714)Updating files:  81% (2199/2714)Updating files:  82% (2226/2714)Updating files:  83% (2253/2714)Updating files:  84% (2280/2714)Updating files:  85% (2307/2714)Updating files:  86% (2335/2714)Updating files:  87% (2362/2714)Updating files:  88% (2389/2714)Updating files:  89% (2416/2714)Updating files:  90% (2443/2714)Updating files:  91% (2470/2714)Updating files:  92% (2497/2714)Updating files:  93% (2525/2714)Updating files:  94% (2552/2714)Updating files:  95% (2579/2714)Updating files:  96% (2606/2714)Updating files:  97% (2633/2714)Updating files:  98% (2660/2714)Updating files:  98% (2672/2714)Updating files:  99% (2687/2714)Updating files: 100% (2714/2714)Updating files: 100% (2714/2714), done. ## Using repo_dir: /home/runner/work/AMPH_Forecast_Suite/AMPH_Forecast_Suite/vignettes/FluSight-forecast-hub"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"copy-specific-forecast-round-to-the-model-output-folder","dir":"Articles","previous_headings":"2) Get FluSight data repo","what":"Copy specific forecast round to the model-output folder","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"copy forecasts set models FluSight. include: # - FluSight-baseline # - MOBS-GLEAM_FLUH # - FluSight-ensemble","code":"# models from flusight models_to_copy <- c(   \"FluSight-baseline\",   \"MOBS-GLEAM_FLUH\",   \"FluSight-ensemble\")  #models from AMPH models_created_in_AMPH <- list.dirs(\"model-output\",                                      full.names = FALSE,                                      recursive = FALSE) # copy Forecast Hub forecasts to model-output folder copy_fch_outputs(repo_dir,                  reference_date,                  models_to_copy) ## Copied files for date 2024-12-07 to /home/runner/work/AMPH_Forecast_Suite/AMPH_Forecast_Suite/vignettes/model-output"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"load-model-output-hub-forecasts-your-forecasts","dir":"Articles","previous_headings":"","what":"4) Load model output (hub forecasts & your forecasts)","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"","code":"output_path <- file.path(\"model-output\")  # Retrieve parquet/csv model output files and keep those matching the reference date file_paths <- list.files(output_path, pattern = \"\\\\.(parquet|csv)$\",                          full.names = TRUE, recursive = TRUE) file_paths <- file_paths[grepl(reference_date, file_paths)]  if (!length(file_paths)) {   stop(\"No model-output files found for reference_date = \", reference_date,        \". Try a different date.\") }   # Read & bind; keep quantile forecasts; add model_id from folder name  projection_data_all <- file_paths %>%   purrr::map_dfr(function(.x) {     df <- read_model_file(.x)          # standardize expected columns just in case     if (!\"output_type\" %in% names(df))   stop(\"Missing 'output_type' in: \", .x)     if (!\"output_type_id\" %in% names(df)) stop(\"Missing 'output_type_id' in: \", .x)          df %>%       dplyr::filter(.data$output_type == \"quantile\") %>%       dplyr::mutate(         output_type_id = suppressWarnings(as.numeric(.data$output_type_id)),         model_id = basename(dirname(.x)),         location = as.character(location)       )   })  prep_proj_data <- projection_data_all %>%   dplyr::mutate(     target_end_date = dplyr::coalesce(target_end_date, reference_date + 7 * as.integer(horizon))   ) %>%   dplyr::select(-tidyselect::any_of(c(\"model\", \"origin_date\")))  # Convert to hubverse model_out_tbl format projection_data_tbl <- hubUtils::as_model_out_tbl(prep_proj_data) %>%   dplyr::filter(model_id %in% c(     models_created_in_AMPH,     models_to_copy   ))   # Read and join location metadata (for names/abbreviations)  # loc_data <- readr::read_csv(file.path(dir_path, \"auxiliary-data\", \"locations.csv\"), #                             show_col_types = FALSE) data(loc_data, package = \"AMPHForecastSuite\")  projection_data_tbl2 <- projection_data_tbl %>%   dplyr::left_join(     loc_data %>%         mutate(location = tolower(abbreviation)) %>%             dplyr::select(location, location_name) %>%       bind_rows(         loc_data %>%           dplyr::select(location, location_name)),     by = \"location\"   ) %>%   dplyr::mutate(location_name = dplyr::coalesce(location_name, location))   dplyr::distinct(projection_data_tbl, model_id) %>% knitr::kable()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"pick-location-start-date-and-uncertainty-bands","dir":"Articles","previous_headings":"","what":"5) Pick location, start date, and uncertainty bands","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"","code":"# Location can be \"US\" or a full state name (must match location_name in target_data) loc <- state_name start_date <- lubridate::as_date(reference_date) - lubridate::weeks(12) # Middle 80% interval: uncertainty <- c(0.1, 0.9)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"build-a-simple-equal-weight-ensemble","dir":"Articles","previous_headings":"","what":"6) Build a simple equal-weight ensemble","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"use simple_ensemble() function hubEnsembles package build simple, equal-weight ensemble across set models. example, exclude FluSight-baseline FluSight-ensemble, ensemble single location forecast date.","code":"# Filter to the location of interest and the chosen forecast round round_dat <- projection_data_tbl2 %>%   dplyr::filter(.data$location_name == loc,                 target == target,                 output_type == \"quantile\",                 horizon >= 0) %>%   dplyr::collect()  # Generate a simple (equal-weight) ensemble across contributing models round_ens <- hubEnsembles::simple_ensemble(   round_dat %>%     dplyr::filter(model_id %in% c(\"AMPH-SARIMA\",\"AMPH-neuralnetwork\", \"MOBS-GLEAM_FLUH\"))) %>%      # dplyr::filter(!(model_id %in% c(\"FluSight-baseline\", \"AMPH-SARIMA\",\"AMPH-neuralnetwork\",     #                                 \"FluSight-ensemble\",     #                                 \"AMPH-epipredict-climate\")))) %>%   mutate(model_id = \"AMPH-ensemble\")  # Combine ensemble with individual models for plotting plot_df <- dplyr::bind_rows(round_dat, round_ens)  # lapply(unique(round_dat$model_id), function(x){round_dat %>% filter(model_id==x) %>% pull(output_type_id) %>% unique() %>% length()})  unique(plot_df$model_id) ## [1] \"AMPH-epipredict-arx\"     \"AMPH-epipredict-climate\" ## [3] \"AMPH-neuralnetwork\"      \"AMPH-sarima\"             ## [5] \"FluSight-baseline\"       \"FluSight-ensemble\"       ## [7] \"MOBS-GLEAM_FLUH\"         \"AMPH-ensemble\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"prepare-data-for-visualization","dir":"Articles","previous_headings":"","what":"7) Prepare data for visualization","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"","code":"# pull updated target data new_target_data_date <- lubridate::as_date(reference_date) + lubridate::weeks(5) target_data_plot <- get_nhsn_data(   disease = forecast_disease,   geo_values = geo_ids,   forecast_date = new_target_data_date,   save_data = TRUE ) ## Important: forecast_date is more than 1 week ago. Pulling data issued prior to forecast_date. ## Pulling data issued on or before 2025-01-11 ## Warning: No API key found. You will be limited to non-complex queries and encounter rate ## limits if you proceed. ## ℹ See `?save_api_key()` for details on obtaining and setting API keys. ## This warning is displayed once every 8 hours. target_data_plot <- readr::read_csv(   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")),   show_col_types = FALSE)  # Forecasts to tidy plot proj_data <- hubUtils::as_model_out_tbl(plot_df) %>%   dplyr::rename(target_date = target_end_date) %>%   dplyr::mutate(output_type_id = suppressWarnings(as.numeric(output_type_id))) %>%   dplyr::arrange(model_id, horizon, target_date, output_type_id) %>%   dplyr::distinct(model_id, horizon, target_date, output_type_id, .keep_all = TRUE)  # Observed data for the same location and time window target_data_plot <- target_data_plot %>%   dplyr::filter(target_end_date > start_date) %>%   dplyr::rename(date = target_end_date)  head(proj_data) ## # A tibble: 6 × 10 ##   model_id      target_date reference_date target horizon location location_name ##   <chr>         <date>      <date>         <chr>    <dbl> <chr>    <chr>         ## 1 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## 2 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## 3 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## 4 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## 5 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## 6 AMPH-ensemble 2024-12-07  2024-12-07     wk in…       0 24       Maryland      ## # ℹ 3 more variables: output_type <chr>, output_type_id <dbl>, value <dbl> head(target_data_plot) ## # A tibble: 6 × 10 ##   location abbreviation location_name target    source disease signal date       ##      <dbl> <chr>        <chr>         <chr>     <chr>  <chr>   <chr>  <date>     ## 1       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-09-21 ## 2       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-09-28 ## 3       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-10-05 ## 4       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-10-12 ## 5       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-10-19 ## 6       24 MD           Maryland      wk inc i… nhsn   influe… confi… 2024-10-26 ## # ℹ 2 more variables: issue_date <date>, observation <dbl>"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"plot-forecasts-vs--truth","dir":"Articles","previous_headings":"","what":"8) Plot forecasts vs. truth","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"use two different approaches visualize forecasts vs. observed data. hubVis package provides convenient function plot forecasts, plot_step_ahead_model_output(). can also plot ggplot2 directly, though requires code.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"option-1-with-hubvis","dir":"Articles","previous_headings":"8) Plot forecasts vs. truth","what":"Option 1: with hubVis","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"","code":"# This is having issues  hubVis::plot_step_ahead_model_output(   proj_data,   target_data = target_data_plot,   use_median_as_point = TRUE,   show_legend = TRUE,   intervals = 0.8,           ens_name = \"AMPH-ensemble\",   ens_color = \"black\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"option-2-with-ggplot2","dir":"Articles","previous_headings":"8) Plot forecasts vs. truth","what":"Option 2: with ggplot2","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"","code":"library(dplyr) library(tidyr) library(ggplot2) library(scales)  # target_data_plot <- readr::read_csv( #   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")), #   show_col_types = FALSE)  # Identify ensemble id from the object you created earlier ens_id <- unique(round_ens$model_id)[1]  # e.g., \"hub-ensemble\"  # Build the 80% ribbon (0.1 / 0.9) for all models ribbon_80 <- proj_data %>%   filter(output_type == \"quantile\", output_type_id %in% c(0.1, 0.9)) %>%   mutate(output_type_id = as.numeric(output_type_id)) %>%   select(model_id, horizon, target_date, output_type_id, value) %>%   pivot_wider(names_from = output_type_id, values_from = value, names_prefix = \"q\") %>%   rename(ymin = q0.1, ymax = q0.9)  # Median (0.5) for all models med_50 <- proj_data %>%   filter(output_type == \"quantile\", output_type_id == 0.5) %>%   select(model_id, horizon, target_date, value) %>%   mutate(line_width = if_else(model_id == ens_id, 1.1, 0.8))  # Legend order: others first, ensemble last model_levels <- proj_data %>%   distinct(model_id) %>%   pull(model_id) %>%   setdiff(ens_id) %>%   c(ens_id)  # Okabe–Ito palette (color-blind friendly) okabe_ito <- c(   \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\",   \"#0072B2\", \"#D55E00\", \"#CC79A7\", \"#999999\" ) n_other <- length(model_levels) - 1  other_cols <- if (n_other <= length(okabe_ito)) okabe_ito[seq_len(n_other)] else scales::hue_pal(l = 45, c = 100)(n_other)  # Lines: others = Okabe–Ito, ensemble = black color_vals <- setNames(c(other_cols, \"#000000\"), model_levels) # Ribbons: same hues; ensemble darker gray so black line pops fill_vals  <- setNames(c(other_cols, \"#3A3A3A\"), model_levels)  ggplot() +   geom_ribbon(     data = ribbon_80,     aes(x = target_date, ymin = ymin, ymax = ymax, fill = model_id),     alpha = 0.22, show.legend = TRUE   ) +   geom_line(     data = med_50,     aes(x = target_date, y = value, color = model_id, linewidth = line_width),     lineend = \"round\", alpha = 0.98, show.legend = TRUE   ) +   geom_point(     data = target_data_plot,     aes(x = date, y = observation),     size = 1.2, alpha = 0.85, inherit.aes = FALSE,     color = \"grey50\"   ) +   geom_line(     data = target_data_plot,     aes(x = date, y = observation),     alpha = 0.85, inherit.aes = FALSE,     color = \"grey50\"   ) +   scale_color_manual(values = color_vals, name = \"Model\") +   scale_fill_manual(values  = fill_vals,  name = \"Model\") +   scale_linewidth_identity() +   labs(x = \"Target date\", y = \"Weekly incident hospitalizations\") +   theme_minimal(base_size = 12) +   theme(legend.position = \"right\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/04-utilizing-hub-output.html","id":"score-forecasts-wis-coverage","dir":"Articles","previous_headings":"","what":"10) Score forecasts (WIS, coverage)","title":"4. Ensembling, Visualization, and Scoring Forecasting Outputs","text":"Evaluation forecasts critical assessing model performance building trust forecasts. Proper scoring rules, Weighted Interval Score (WIS), provide way evaluate accuracy calibration probabilistic forecasts. Scoring requires observed data. use scoringutils package compute WIS forecasts.","code":"scoring_target_data <- readr::read_csv(   file.path(\"target-data\", paste0(\"target-hospital-admissions-\", new_target_data_date, \".csv\")),   show_col_types = FALSE)  scoring_target_data <- scoring_target_data %>%   filter(location %in% location,          issue_date >= target_end_date,          target_end_date > \"2022-09-01\") %>%   select(geo_value = location, target_end_date, value = observation) %>%   drop_na(value) %>%   epiprocess::as_epi_df(time_value = target_end_date) # Join forecasts with observations at (target_date, location) # and conform to scoringutils \"forecast\" structure.  scoring_df <- dplyr::left_join(   proj_data,   scoring_target_data %>%     dplyr::rename(observation = value,                   target_date = time_value) %>%     mutate(location_name = loc) %>%     select(-geo_value),   by = c(\"target_date\", \"location_name\"),   relationship = \"many-to-one\" ) %>%   dplyr::rename(     model = model_id,     predicted = value,     observed = observation,     quantile_level = output_type_id   )  # Convert to a scoringutils forecast object forecast <- scoringutils::as_forecast_quantile(   scoring_df,   observed       = \"observed\",   predicted      = \"predicted\",   quantile_level = \"quantile_level\",   # be explicit so extra cols don't confuse the unit of a single forecast   forecast_unit  = c(\"model\", \"location_name\", \"target_date\") )  # Score (WIS, coverage, etc.) scores <- scoringutils::score(forecast) knitr::kable(scoringutils::summarise_scores(scores, by = \"model\"))"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"convert-data-between-formats","dir":"Articles","previous_headings":"","what":"Convert Data Between Formats","title":"Other: Converting File Types","text":"package provides helper functions convert data hub format various forecasting package formats:","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"hub-fabletsibble","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ Fable/tsibble","title":"Other: Converting File Types","text":"Convert hub data tsibble fable modeling","code":"library(AMPHForecastSuite) ## Loading required package: jsonlite ## Loading required package: remotes ## Loading required package: scales ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.1     ✔ stringr   1.5.2 ## ✔ ggplot2   4.0.0     ✔ tibble    3.3.0 ## ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 ## ✔ purrr     1.1.0      ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ readr::col_factor() masks scales::col_factor() ## ✖ purrr::discard()    masks scales::discard() ## ✖ dplyr::filter()     masks stats::filter() ## ✖ purrr::flatten()    masks jsonlite::flatten() ## ✖ dplyr::lag()        masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors ## Registered S3 method overwritten by 'tsibble': ##   method               from  ##   as_tibble.grouped_df dplyr ##  ## Registered S3 method overwritten by 'epipredict': ##   method            from    ##   print.step_naomit recipes hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 20),   location = \"US\",   value = rnorm(20, 100, 10) )  # Convert to tsibble format ts_data <- convert_hub_to_tsibble(hub_data)  # Use with fable library(fable) ## Loading required package: fabletools library(tsibble) ##  ## Attaching package: 'tsibble' ##  ## The following object is masked from 'package:lubridate': ##  ##     interval ##  ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, union model <- ts_data %>%    model(arima = ARIMA(value)) ## Warning: 1 error encountered for arima ## [1] The `feasts` package must be installed to use this functionality. It can be installed with install.packages(\"feasts\") # Convert fable forecasts back to hub format forecasts <- model %>% forecast(h = 4) hub_forecasts <- convert_fable_to_hub(forecasts, location = \"US\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"hub-epiestim","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ EpiEstim","title":"Other: Converting File Types","text":"","code":"# Prepare data for EpiEstim epiestim_data <- convert_hub_to_epiestim(   hub_data,    location_filter = \"US\" )  # Run EpiEstim (example) library(EpiEstim) res <- estimate_R(epiestim_data, method = \"parametric_si\",                   config = make_config(list(mean_si = 7, std_si = 4.5)))  # Convert results back to hub format hub_r_estimates <- convert_epiestim_to_hub(res, location = \"US\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"hub-epinow2","dir":"Articles","previous_headings":"Convert Data Between Formats","what":"Hub ↔︎ EpiNow2","title":"Other: Converting File Types","text":"","code":"# Prepare data for EpiNow2 epinow2_data <- convert_hub_to_epinow2(   hub_data,   location_filter = \"US\" )  # Run EpiNow2 (example) library(EpiNow2) res <- epinow(   reported_cases = epinow2_data,   generation_time = generation_time_opts(Generation_Time_Opts(...)),   delays = delay_opts(Delay_Opts(...)) )  # Convert results back to hub format hub_forecasts <- convert_epinow2_to_hub(res, location = \"US\")"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"converting-to-fable-format","dir":"Articles","previous_headings":"Working with Hub Data","what":"Converting to Fable Format","title":"Other: Converting File Types","text":"package makes easy convert hub-formatted data work fable forecasting package:","code":"library(AMPHForecastSuite)  # Create sample hub data hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 20),   location = \"US\",   value = rnorm(20, 100, 10) )  # Convert to tsibble format for fable ts_data <- convert_hub_to_tsibble(hub_data) print(ts_data)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"using-fable-for-forecasting","dir":"Articles","previous_headings":"Working with Hub Data","what":"Using Fable for Forecasting","title":"Other: Converting File Types","text":"data tsibble format, can use fable forecasting:","code":"library(fable) library(tsibble)  # Fit a model model <- ts_data %>%    model(     arima = ARIMA(value),     ets = ETS(value)   )  # Generate forecasts forecasts <- model %>% forecast(h = 4)  # Convert back to hub format hub_forecasts <- convert_fable_to_hub(forecasts, location = \"US\", target = \"inc\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"working-with-epiestim","dir":"Articles","previous_headings":"","what":"Working with EpiEstim","title":"Other: Converting File Types","text":"EpiEstim used estimate time-varying reproduction numbers:","code":"library(EpiEstim)  # Prepare daily case data hub_data_daily <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) )  # Convert to EpiEstim format epiestim_data <- convert_hub_to_epiestim(hub_data_daily, location_filter = \"US\")  # Estimate R res <- estimate_R(   epiestim_data,    method = \"parametric_si\",   config = make_config(list(mean_si = 7, std_si = 4.5)) )  # Convert results back to hub format hub_r_estimates <- convert_epiestim_to_hub(res, location = \"US\") print(hub_r_estimates)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/05-convert_file_types.html","id":"working-with-epinow2","dir":"Articles","previous_headings":"","what":"Working with EpiNow2","title":"Other: Converting File Types","text":"EpiNow2 provides sophisticated estimation forecasting delay distributions:","code":"library(EpiNow2)  # Prepare data for EpiNow2 epinow2_data <- convert_hub_to_epinow2(hub_data_daily, location_filter = \"US\")  # Run EpiNow2 (simplified example) # Note: You would need to specify generation time and delay distributions res <- epinow(   reported_cases = epinow2_data,   generation_time = generation_time_opts(     Generation_Time_Opts(mean = 5, sd = 2)   ),   delays = delay_opts(     Delay_Opts(mean = 3, sd = 1)   ) )  # Convert results back to hub format hub_forecasts <- convert_epinow2_to_hub(res, location = \"US\") print(hub_forecasts)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"6. Existing Forecast and Scenario Projection Hubs","text":"vignette provides overview existing forecast scenario projection hubs infectious diseases United States. hubs serve collaborative platforms modeling teams submit forecasts scenario projections, aggregated, visualized, shared public health decision-makers. hubs described actively maintained provide valuable resources understanding infectious disease trends supporting public health planning. follow standardized formats protocols, many based Hubverse framework.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"forecast-hubs","dir":"Articles","previous_headings":"","what":"Forecast Hubs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Forecast hubs collect short-term predictions disease incidence, hospitalizations, metrics. forecasts typically generated weekly provide probabilistic predictions upcoming weeks.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"rsv-forecast-hub","dir":"Articles","previous_headings":"Forecast Hubs","what":"RSV Forecast Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://rsvforecasthub.org/GitHub Repository: @HopkinsIDD/rsv-forecast-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description","dir":"Articles","previous_headings":"Forecast Hubs > RSV Forecast Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"RSV Forecast Hub collaborative effort collect aggregate forecasts respiratory syncytial virus (RSV) hospitalizations United States. hub maintained researchers Johns Hopkins University collects weekly forecasts multiple modeling teams.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features","dir":"Articles","previous_headings":"Forecast Hubs > RSV Forecast Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Target Variable: Weekly RSV-associated hospital admissions Geographic Coverage: National state-level forecasts across United States Forecast Horizon: Typically 1-4 weeks ahead Submission Frequency: Weekly Data Sources: Hospital admission data National Healthcare Safety Network (NHSN)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard","dir":"Articles","previous_headings":"Forecast Hubs > RSV Forecast Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"RSV Forecast Hub website provides interactive visualizations showing: Current ensemble forecasts individual model predictions Historical forecast performance Comparison different modeling approaches Geographic distribution predicted RSV hospitalizations","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases","dir":"Articles","previous_headings":"Forecast Hubs > RSV Forecast Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Supporting public health planning RSV season Monitoring RSV trends hospitalizations Evaluating forecast model performance Informing healthcare capacity planning","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"covid-19-forecast-hub","dir":"Articles","previous_headings":"Forecast Hubs","what":"COVID-19 Forecast Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://covid19forecasthub.org/GitHub Repositories: - @reichlab/covid19-forecast-hub - @CDCgov/covid19-forecast-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-1","dir":"Articles","previous_headings":"Forecast Hubs > COVID-19 Forecast Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"COVID-19 Forecast Hub established March 2020 collaborative effort collect combine forecasts COVID-19 cases, hospitalizations, deaths United States. Led Reich Lab UMass Amherst collaboration CDC, hub became critical resource pandemic.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-1","dir":"Articles","previous_headings":"Forecast Hubs > COVID-19 Forecast Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Weekly COVID-19 hospital admissions Weekly COVID-19 deaths Weekly COVID-19 cases (historical) Geographic Coverage: National, state, county-level forecasts Forecast Horizon: 1-4 weeks ahead Submission Frequency: Weekly Ensemble Model: hub creates ensemble forecast combining multiple models, used CDC public communication","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-1","dir":"Articles","previous_headings":"Forecast Hubs > COVID-19 Forecast Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"COVID-19 Forecast Hub website features: Interactive maps showing forecasted trends Time series plots historical predicted values Model comparison tools Downloadable forecast data Historical archives submitted forecasts","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"impact","dir":"Articles","previous_headings":"Forecast Hubs > COVID-19 Forecast Hub","what":"Impact","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Provided critical forecasts CDC public health agencies Ensemble forecasts featured CDC communications Pioneered collaborative forecasting approaches influenced subsequent hubs Published methodology evaluation studies peer-reviewed journals","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"flusight-influenza-forecast-hub","dir":"Articles","previous_headings":"Forecast Hubs","what":"FluSight Influenza Forecast Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://www.cdc.gov/flu-forecasting//index.htmlDashboard: https://www.cdc.gov/flu-forecasting/data-vis/current-week.htmlGitHub Repository: @cdcepi/FluSight-forecast-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-2","dir":"Articles","previous_headings":"Forecast Hubs > FluSight Influenza Forecast Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"FluSight Influenza Forecast Hub managed CDC represents longest-running infectious disease forecast hub United States. Building annual FluSight challenges began 2013, current hub collects weekly forecasts influenza hospitalizations.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-2","dir":"Articles","previous_headings":"Forecast Hubs > FluSight Influenza Forecast Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Target Variable: Weekly influenza hospital admissions Geographic Coverage: National state-level forecasts Forecast Horizon: 0-3 weeks ahead (nowcast short-term forecasts) Submission Frequency: Weekly flu season Data Sources: NHSN hospital admission data Historical Context: Builds nearly decade seasonal influenza forecasting challenges","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-2","dir":"Articles","previous_headings":"Forecast Hubs > FluSight Influenza Forecast Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"CDC’s FluSight visualization dashboard includes: Current week’s ensemble forecast uncertainty intervals State--state forecast maps Historical forecast accuracy metrics Comparison previous flu seasons Model-specific forecast visualizations","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases-1","dir":"Articles","previous_headings":"Forecast Hubs > FluSight Influenza Forecast Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Supporting CDC’s seasonal influenza surveillance response Informing vaccine distribution healthcare resource allocation Providing early warning increasing influenza activity Evaluating improving influenza forecast models multiple seasons","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"flu-metrocast-hub","dir":"Articles","previous_headings":"Forecast Hubs","what":"Flu MetroCast Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://reichlab.io/metrocast-dashboard/GitHub Repository: @reichlab/flu-metrocast","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-3","dir":"Articles","previous_headings":"Forecast Hubs > Flu MetroCast Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Flu MetroCast Hub research project led Reich Lab UMass Amherst focusing metropolitan-level influenza forecasts. Unlike hubs primarily focus state national levels, MetroCast provides granular geographic predictions.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-3","dir":"Articles","previous_headings":"Forecast Hubs > Flu MetroCast Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Target Variable: Influenza-like illness (ILI) influenza hospitalizations Geographic Coverage: Metropolitan statistical areas (MSAs) across United States Forecast Horizon: Short-term forecasts (typically 1-4 weeks) Focus: Sub-state geographic resolution targeted public health action","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-3","dir":"Articles","previous_headings":"Forecast Hubs > Flu MetroCast Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"MetroCast dashboard provides: Metropolitan area-level forecast visualizations Interactive maps predicted influenza activity Time series comparisons across metro areas Model performance metrics","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases-2","dir":"Articles","previous_headings":"Forecast Hubs > Flu MetroCast Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Supporting city county-level public health planning Enabling targeted interventions urban areas Studying spatial patterns influenza transmission Developing evaluating sub-state forecasting methods","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"scenario-projection-hubs","dir":"Articles","previous_headings":"","what":"Scenario Projection Hubs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Scenario projection hubs differ forecast hubs produce longer-term projections based specific assumptions future conditions (e.g., vaccination rates, emergence new variants, implementation interventions). projections used planning policy analysis rather near-term prediction.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"covid-19-scenario-modeling-hub","dir":"Articles","previous_headings":"Scenario Projection Hubs","what":"COVID-19 Scenario Modeling Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://covid19scenariomodelinghub.org/GitHub Repository: @midas-network/covid19-scenario-modeling-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-4","dir":"Articles","previous_headings":"Scenario Projection Hubs > COVID-19 Scenario Modeling Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"COVID-19 Scenario Modeling Hub (SMH) established provide medium- long-term scenario projections COVID-19 pandemic. Coordinated MIDAS Network (Models Infectious Disease Agent Study), hub collects scenario projections multiple modeling teams based coordinated scenario assumptions.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-4","dir":"Articles","previous_headings":"Scenario Projection Hubs > COVID-19 Scenario Modeling Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Projection Type: Medium- long-term scenario projections (weeks months ahead) Incident cases Hospitalizations Deaths Variant emergence characteristics Vaccination coverage booster uptake Non-pharmaceutical interventions Population behavior Submission Frequency: Round-based (typically every 1-3 months)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-4","dir":"Articles","previous_headings":"Scenario Projection Hubs > COVID-19 Scenario Modeling Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"COVID-19 SMH website features: Scenario-specific projections clear assumption statements Comparison across different scenarios State national-level visualizations Reports summarizing key findings projection round Historical archive scenario rounds","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases-3","dir":"Articles","previous_headings":"Scenario Projection Hubs > COVID-19 Scenario Modeling Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Supporting long-term pandemic planning Evaluating potential impact policy decisions Comparing outcomes different intervention strategies Informing vaccine distribution healthcare capacity planning","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"influenza-scenario-modeling-hub","dir":"Articles","previous_headings":"Scenario Projection Hubs","what":"Influenza Scenario Modeling Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://fluscenariomodelinghub.org/GitHub Repository: @midas-network/flu-scenario-modeling-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-5","dir":"Articles","previous_headings":"Scenario Projection Hubs > Influenza Scenario Modeling Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Influenza Scenario Modeling Hub extends scenario modeling approach seasonal influenza. Like COVID-19 SMH, coordinated MIDAS Network provides scenario-based projections support public health planning.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-5","dir":"Articles","previous_headings":"Scenario Projection Hubs > Influenza Scenario Modeling Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Projection Type: Seasonal scenario projections Incident influenza cases Hospitalizations Deaths Seasonal severity Vaccine effectiveness coverage Timing seasonal peak Antiviral availability use Submission Frequency: Seasonal rounds (typically flu season)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-5","dir":"Articles","previous_headings":"Scenario Projection Hubs > Influenza Scenario Modeling Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Influenza SMH website includes: Season-specific scenario projections Comparison different severity scenarios Geographic visualizations state national levels Summary reports projection round","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases-4","dir":"Articles","previous_headings":"Scenario Projection Hubs > Influenza Scenario Modeling Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Pre-season planning healthcare systems Vaccine allocation distribution planning Evaluating potential benefits different intervention strategies Preparing various levels seasonal severity","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"rsv-scenario-modeling-hub","dir":"Articles","previous_headings":"Scenario Projection Hubs","what":"RSV Scenario Modeling Hub","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Website: https://rsvscenariomodelinghub.org/GitHub Repository: @midas-network/rsv-scenario-modeling-hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"description-6","dir":"Articles","previous_headings":"Scenario Projection Hubs > RSV Scenario Modeling Hub","what":"Description","title":"6. Existing Forecast and Scenario Projection Hubs","text":"RSV Scenario Modeling Hub newest addition scenario modeling hub family. provides scenario projections RSV, particularly relevant given recent availability new RSV vaccines immunoprophylaxis options.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"key-features-6","dir":"Articles","previous_headings":"Scenario Projection Hubs > RSV Scenario Modeling Hub","what":"Key Features","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Projection Type: Scenario projections RSV seasons RSV-associated hospitalizations Vaccine immunoprophylaxis uptake Impact new prevention tools Seasonal severity variations Age-specific outcomes Submission Frequency: Seasonal rounds","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"dashboard-6","dir":"Articles","previous_headings":"Scenario Projection Hubs > RSV Scenario Modeling Hub","what":"Dashboard","title":"6. Existing Forecast and Scenario Projection Hubs","text":"RSV SMH website provides: Scenario projections considering different prevention strategies Age-stratified projections State national-level visualizations Impact assessments vaccination immunoprophylaxis programs","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"use-cases-5","dir":"Articles","previous_headings":"Scenario Projection Hubs > RSV Scenario Modeling Hub","what":"Use Cases","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Planning new RSV prevention tools (vaccines, monoclonal antibodies) Evaluating potential impact different coverage levels Supporting healthcare system planning RSV season Informing policies RSV prevention programs","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"forecast-hubs-1","dir":"Articles","previous_headings":"Comparing Hubs: Forecasts vs. Scenarios","what":"Forecast Hubs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Time Horizon: Short-term (1-4 weeks) Purpose: Predict likely happen Frequency: Weekly submissions Use Case: Near-term situational awareness response planning Validation: Can directly validated observed data Examples: RSV Forecast Hub, COVID-19 Forecast Hub, FluSight","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"scenario-projection-hubs-1","dir":"Articles","previous_headings":"Comparing Hubs: Forecasts vs. Scenarios","what":"Scenario Projection Hubs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Time Horizon: Medium- long-term (weeks months) Purpose: Explore happen different conditions Frequency: Round-based (typically every 1-3 months) Use Case: Policy analysis longer-term strategic planning Validation: Evaluated based assumptions conditional outcomes Examples: COVID-19 Scenario Modeling Hub, Influenza Scenario Modeling Hub, RSV Scenario Modeling Hub","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"common-technical-framework","dir":"Articles","previous_headings":"","what":"Common Technical Framework","title":"6. Existing Forecast and Scenario Projection Hubs","text":"hubs use common technical standards:","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"data-formats","dir":"Articles","previous_headings":"Common Technical Framework","what":"Data Formats","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Model Output: Standardized file formats (typically CSV quantile sample-based probabilistic forecasts) Target Data: Common reference datasets (e.g., NHSN hospitalizations) Metadata: Model descriptions, assumptions, methods documented metadata files","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"hubverse-standards","dir":"Articles","previous_headings":"Common Technical Framework","what":"Hubverse Standards","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Many hubs adopted transitioning Hubverse framework, provides: Standardized file formats directory structures Validation tools (hubValidations package) Data access tools (hubData package) Visualization tools (hubVis package) Ensemble generation tools (hubEnsembles package)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"submission-process","dir":"Articles","previous_headings":"Common Technical Framework","what":"Submission Process","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Scenario Definition: scenario hubs, coordinated scenario specifications released Model Development: Teams develop run models Submission: Models submit predictions via pull requests hub’s GitHub repository Validation: Automated checks ensure submissions meet format requirements Aggregation: Hub coordinators create ensemble forecasts (forecast hubs) Visualization: Results displayed hub websites Evaluation: Ongoing assessment forecast/projection accuracy calibration","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"using-hub-data-in-your-work","dir":"Articles","previous_headings":"","what":"Using Hub Data in Your Work","title":"6. Existing Forecast and Scenario Projection Hubs","text":"","code":"library(AMPHForecastSuite) library(hubData) library(hubVis) library(dplyr)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"accessing-hub-data","dir":"Articles","previous_headings":"Using Hub Data in Your Work","what":"Accessing Hub Data","title":"6. Existing Forecast and Scenario Projection Hubs","text":"can access data forecasting hubs using provided functions . Functions accessing scenario projection hubs added soon.","code":"# Clone a forecast hub repository repo_dir <- clone_hub_repos(   disease = \"influenza\",  # or \"covid\", \"rsv\"   clone_dir = getwd() )  # Load forecast data using hubData library(hubData) forecasts <- hubData::connect_hub(repo_dir) %>%   hubData::collect_forecasts()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"working-with-hub-outputs","dir":"Articles","previous_headings":"Using Hub Data in Your Work","what":"Working with Hub Outputs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"AMPH Forecast Suite provides tools work hub data:","code":"# Visualize forecasts library(hubVis) plot_forecasts(forecasts,                 target = \"wk inc flu hosp\",                location = \"US\")  # Score forecasts against observations library(scoringutils) scores <- score_forecasts(   forecasts = forecasts,   truth = target_data )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"contributing-to-hubs","dir":"Articles","previous_headings":"","what":"Contributing to Hubs","title":"6. Existing Forecast and Scenario Projection Hubs","text":"’re interested contributing forecasts scenario projections hubs: Review Hub Documentation: hub detailed documentation GitHub repository Understand Requirements: Review format specifications submission guidelines Develop Models: Build forecasting projection models appropriate hub Test Submissions: Use validation tools ensure submissions meet requirements Submit via Pull Request: Follow hub’s submission process Engage Community: Join mailing lists attend hub meetings Many hubs welcome new contributors provide support teams developing models.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"general-resources","dir":"Articles","previous_headings":"Resources and Further Reading","what":"General Resources","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Hubverse Documentation: https://hubverse.io/ MIDAS Network: https://midasnetwork.us/ CDC Forecasting: https://www.cdc.gov/forecast-outbreak-analytics/","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"publications","dir":"Articles","previous_headings":"Resources and Further Reading","what":"Publications","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Many hubs published peer-reviewed papers describing methods, results, lessons learned. Check individual hub websites publications lists.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"training-materials","dir":"Articles","previous_headings":"Resources and Further Reading","what":"Training Materials","title":"6. Existing Forecast and Scenario Projection Hubs","text":"Hubverse Workshops: Hubverse community offers workshops training materials MIDAS Training: MIDAS Network provides training infectious disease modeling CDC Resources: CDC offers resources forecast interpretation use","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"6. Existing Forecast and Scenario Projection Hubs","text":"forecast scenario projection hubs described vignette represent mature ecosystem collaborative infectious disease modeling. provide: Transparent Processes: Open-source code data Standardized Approaches: Common formats protocols Collaborative Science: Multi-team efforts diverse methods Practical Impact: Direct support public health decision-making AMPH Forecast Suite designed work seamlessly hubs, providing tools : Access hub data Format models’ outputs hub submission Evaluate forecasts using hub standards Visualize compare results Whether ’re using hub data research, developing new forecasting methods, contributing collaborative efforts, understanding landscape existing hubs essential effective infectious disease forecasting.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/articles/06-existing-forecast-hubs.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"6. Existing Forecast and Scenario Projection Hubs","text":"","code":"sessionInfo()"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"ACCIDDA. Author, maintainer.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"ACCIDDA (2024). AMPHForecastSuite: Suite Tools Infectious Disease Forecasting Pipeline Hub. R package version 0.1.0, https://github.com/ACCIDDA/AMPH_Forecast_Suite.","code":"@Manual{,   title = {AMPHForecastSuite: Suite of Tools for Infectious Disease Forecasting Pipeline and Hub},   author = {{ACCIDDA}},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/ACCIDDA/AMPH_Forecast_Suite}, }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"amph-forecast-suite","dir":"","previous_headings":"","what":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"Suite tools helper functions build run infectious disease forecasting pipeline hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"AMPH Forecast Suite R package provides comprehensive toolkit building infectious disease forecasting pipelines hubs. streamlines process working multiple forecasting packages : Installing managing dependencies key forecasting packages Setting appropriate directory structure Pulling manipulating data use forecasting models Providing helper functions translate data different package formats Running forecasts nowcast using multiple packages Ensembling, visualizing, evaluating forecasts Producing outputs compatible forecast hubs evaluation tools information, see package documentation function help pages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"can install development version GitHub:","code":"# Install remotes if you haven't already install.packages(\"remotes\")  # Install AMPH Forecast Suite remotes::install_github(\"ACCIDDA/AMPH_Forecast_Suite\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"install-packages-and-build-directory-structure","dir":"","previous_headings":"Installation","what":"Install Packages and Build Directory Structure","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"package includes function install required packages set directory structure forecasting project.","code":"library(AMPHForecastSuite)  # Install all forecasting packages install_forecast_packages()  # Or install specific categories install_forecast_packages(   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = TRUE,   install_data = TRUE,   install_nowcast = TRUE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"packages-for-infectious-disease-forecasting","dir":"","previous_headings":"","what":"Packages for Infectious Disease Forecasting","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"package helps install work :","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"hubverse-packages","dir":"","previous_headings":"Packages for Infectious Disease Forecasting","what":"Hubverse Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"hubData: Data management forecast hubs hubUtils: Utility functions hubs hubValidations: Validation tools hub submissions hubVis: Visualization tools hub data hubAdmin: Administrative tools hubs","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"forecasting-packages","dir":"","previous_headings":"Packages for Infectious Disease Forecasting","what":"Forecasting Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"fable: Forecasting models tidy time series fabletools: Tools working fable models feasts: Feature extraction statistics time series epiforecast: Tools infectious disease forecasting tsibble: Tidy temporal data frames","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"epidemiological-packages","dir":"","previous_headings":"Packages for Infectious Disease Forecasting","what":"Epidemiological Packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"EpiEstim: Estimate time-varying reproduction numbers EpiNow2: Estimate Rt forecast delays epipredict: Epidemiological forecasting tools","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"nowcasting-packages","dir":"","previous_headings":"Packages for Infectious Disease Forecasting","what":"Nowcasting packages","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"epinowcast: Flexible Hierarchical Nowcasting baselinenowcast: Baseline nowcasting methods handling delays epidemiological data","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"data-access","dir":"","previous_headings":"Packages for Infectious Disease Forecasting","what":"Data Access","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"epidatr: Access epidemiological data various sources","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"additional-resources","dir":"","previous_headings":"","what":"Additional Resources","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"hubEvals Documentation: https://hubverse-org.github.io/hubEvals/ WIS Scoring Function: score_wis() reference Data Format Requirements: Formatting data hubEvals","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"Contributions welcome! Please feel free submit Pull Request.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"project licensed GPL-3 License - see LICENSE file details.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"use package research, please cite :","code":"ACCIDDA (2025). AMPH Forecast Suite: Tools for Infectious Disease Forecasting. R package version 0.1.0. https://github.com/ACCIDDA/AMPH_Forecast_Suite"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Suite of Tools for Infectious Disease Forecasting Pipeline and Hub","text":"questions issues, please open issue GitHub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AMPH Forecast Suite — AMPHForecastSuite-package","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"comprehensive suite tools helper functions build run infectious disease forecasting hub. package facilitates installation integration key forecasting packages including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"install_forecast_packages: Install required forecasting packages convert_hub_to_fable: Convert hub data fable format convert_fable_to_hub: Convert fable forecasts hub format convert_hub_to_epiestim: Convert hub data EpiEstim format convert_epiestim_to_hub: Convert EpiEstim results hub format convert_hub_to_epinow2: Convert hub data EpiNow2 format convert_epinow2_to_hub: Convert EpiNow2 results hub format get_nhsn_data: Retrieve data NHSN","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/AMPHForecastSuite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AMPH Forecast Suite — AMPHForecastSuite-package","text":"Maintainer: ACCIDDA info@example.com","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone github forecast repo — clone_hub_repos","title":"Clone github forecast repo — clone_hub_repos","text":"Clones influenza, covid, rsv forecast hub repos use learning, visualization, etc. Clones current working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone github forecast repo — clone_hub_repos","text":"","code":"clone_hub_repos(disease = \"influenza\", old_rsv_repo = TRUE, clone_dir = NULL)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone github forecast repo — clone_hub_repos","text":"disease Character. One \"influenza\", \"covid\", \"rsv\". Default \"influenza\". old_rsv_repo Logical. TRUE, uses old RSV forecast hub repository. Default TRUE. FALSE, uses new CDC RSV forecast hub repository. parameter relevant disease \"rsv\". RSV forecast hub moved Hopkins CDC starting 2025-26 season. clone_dir Character. Directory clone repository . Default current working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone github forecast repo — clone_hub_repos","text":"Character. path cloned repository.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/clone_hub_repos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone github forecast repo — clone_hub_repos","text":"","code":"if (FALSE) { # \\dontrun{ # Clone the influenza forecast hub repository flu_repo <- clone_hub_repos(disease = \"influenza\") # Clone the COVID-19 forecast hub repository covid_repo <- clone_hub_repos(disease = \"covid\") # Clone the old RSV forecast hub repository old_rsv_repo <- clone_hub_repos(disease = \"rsv\", old_rsv_repo = TRUE) # Clone the new CDC RSV forecast hub repository new_rsv_repo <- clone_hub_repos(disease = \"rsv\", old_rsv_repo = FALSE) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"Converts EpiEstim reproduction number estimates hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"","code":"convert_epiestim_to_hub(   epiestim_result,   location = \"unknown\",   target = \"R_eff\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"epiestim_result EpiEstim result object (output estimate_R) location Character. Location identifier. Default \"unknown\". target Character. Target variable name. Default \"R_eff\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"data frame hub format R estimates","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epiestim_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EpiEstim Output to Hub Format — convert_epiestim_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have EpiEstim results # hub_r_estimates <- convert_epiestim_to_hub(epiestim_res, location = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"Converts EpiNow2 estimates forecasts hub submission format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"","code":"convert_epinow2_to_hub(   epinow2_result,   location = \"unknown\",   target = \"inc\",   extract_type = \"forecasts\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"epinow2_result EpiNow2 result object (output epinow) location Character. Location identifier. Default \"unknown\". target Character. Target variable name. Default \"inc\". extract_type Character. Type data extract: \"forecasts\", \"estimates\", \"\". Default \"forecasts\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_epinow2_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EpiNow2 Output to Hub Format — convert_epinow2_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have EpiNow2 results # hub_forecasts <- convert_epinow2_to_hub(epinow2_res, location = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"Converts fable forecast output hub submission format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"","code":"convert_fable_to_hub(fable_forecast, location = NULL, target = \"inc\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"fable_forecast fable forecast object location Character. Location identifier. Default NULL (extract data). target Character. Target name forecast. Default \"inc\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_fable_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Fable Forecasts to Hub Format — convert_fable_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a fable forecast object # hub_forecast <- convert_fable_to_hub(fc, location = \"US\", target = \"inc\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"Converts data hub format format required EpiEstim package estimating time-varying reproduction numbers.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"","code":"convert_hub_to_epiestim(   hub_data,   date_col = \"date\",   incidence_col = \"value\",   location_col = \"location\",   location_filter = NULL )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"hub_data Data frame hub format date incidence columns date_col Character. Name date column. Default \"date\". incidence_col Character. Name incidence column. Default \"value\". location_col Character. Name location column. Default \"location\". location_filter Character. Location filter (multiple locations). Default NULL.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"data frame formatted EpiEstim columns: dates, (incidence)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epiestim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to EpiEstim Format — convert_hub_to_epiestim","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) ) epiestim_data <- convert_hub_to_epiestim(hub_data, location_filter = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"Converts data hub format format required EpiNow2 package estimating reproduction numbers generating forecasts.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"","code":"convert_hub_to_epinow2(   hub_data,   date_col = \"date\",   cases_col = \"value\",   location_col = \"location\",   location_filter = NULL )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"hub_data Data frame hub format date case columns date_col Character. Name date column. Default \"date\". cases_col Character. Name cases column. Default \"value\". location_col Character. Name location column. Default \"location\". location_filter Character. Location filter (multiple locations). Default NULL.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"data frame formatted EpiNow2 columns: date, confirm","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_epinow2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to EpiNow2 Format — convert_hub_to_epinow2","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"day\", length.out = 50),   location = \"US\",   value = rpois(50, 100) ) epinow2_data <- convert_hub_to_epinow2(hub_data, location_filter = \"US\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to Fable Format — convert_hub_to_fable","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"Converts data hub format format suitable fable modeling. essentially wrapper around convert_hub_to_tsibble additional preparation fable models.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"","code":"convert_hub_to_fable(hub_data, ...)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"hub_data Data frame hub format ... Additional arguments passed convert_hub_to_tsibble","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"tsibble object ready fable modeling","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_fable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to Fable Format — convert_hub_to_fable","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 10),   location = \"US\",   value = rnorm(10, 100, 10) ) fable_data <- convert_hub_to_fable(hub_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"Converts data hub format tsibble format use fable package.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"","code":"convert_hub_to_tsibble(   hub_data,   date_col = \"date\",   value_col = \"value\",   location_col = \"location\",   index = \"date\",   key = \"location\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"hub_data Data frame hub format columns date, location, value, etc. date_col Character. Name date column. Default \"date\". value_col Character. Name value column. Default \"value\". location_col Character. Name location column. Default \"location\". index Character. Name use time index. Default \"date\". key Character vector. Key variables tsibble. Default \"location\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"tsibble object","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_hub_to_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hub Format to Fable/tsibble Format — convert_hub_to_tsibble","text":"","code":"if (FALSE) { # \\dontrun{ hub_data <- data.frame(   date = seq.Date(as.Date(\"2023-01-01\"), by = \"week\", length.out = 10),   location = \"US\",   value = rnorm(10, 100, 10) ) ts_data <- convert_hub_to_tsibble(hub_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert tsibble to Hub Format — convert_tsibble_to_hub","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"Converts tsibble object back standard hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"","code":"convert_tsibble_to_hub(tsibble_data)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"tsibble_data tsibble object","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"data frame hub format","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/convert_tsibble_to_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert tsibble to Hub Format — convert_tsibble_to_hub","text":"","code":"if (FALSE) { # \\dontrun{ # Convert back from tsibble # hub_data <- convert_tsibble_to_hub(ts_data) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"Copy Forecast Hub Outputs model-output","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"","code":"copy_fch_outputs(   repo_dir,   forecast_date,   models_to_copy = c(\"FluSight-baseline\", \"MOBS-GLEAM_FLUH\", \"FluSight-ensemble\") )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"repo_dir Path cloned forecast hub repository. forecast_date Forecast date \"YYYY-MM-DD\" format. Can vector dates. models_to_copy Character vector. Names models copy outputs .","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"function copies forecast output files specified forecasting hub repository local \"model-output\" directory given forecast date. allows users specify models' outputs copy.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/copy_fch_outputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Forecast Hub Outputs to model-output — copy_fch_outputs","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have cloned the influenza forecast hub repository flu_repo <- clone_hub_repos(disease = \"influenza\") # Copy forecast outputs for a specific date copy_fch_outputs(repo_dir = flu_repo, forecast_date = \"2023-10-02\",                  models_to_copy = c(\"FluSight-baseline\", \"MOBS-GLEAM_FLUH\", \"FluSight-ensemble\")) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"Pulls weekly hospitalization count data NHSN (National Healthcare Safety Network) via epidatr package influenza, COVID-19, RSV.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"","code":"get_nhsn_data(   disease = \"influenza\",   geo_values = \"MD\",   forecast_date = \"2025-10-12\",   save_data = TRUE )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"disease Character string specifying disease. Must one : \"influenza\", \"covid\", \"rsv\" (case-insensitive). geo_values Character vector geographic locations (e.g., state abbreviations like \"CA\", \"NY\"). Default \"MD\" Maryland data. forecast_date Character vector date forecast \"YYYY-MM-DD\". Sunday. save_data Logical. TRUE, saves retrieved data CSV file working directory.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"data frame containing NHSN hospitalization data columns   typically including geo_value, time_value, hospitalization counts.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_nhsn_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NHSN Weekly Hospitalization Data — get_nhsn_data","text":"","code":"if (FALSE) { # \\dontrun{ # Get COVID-19 data for California and New York for specific weeks covid_data <- get_nhsn_data(   disease = \"covid\",   geo_values = c(\"ca\", \"ny\"),   forecast_date = \"2025-10-12\" )  # Get influenza data for California and New York for specific weeks flu_data <- get_nhsn_data(   disease = \"influenza\",   geo_values = c(\"ca\", \"ny\"),   forecast_date = \"2025-10-12\" )  # Get RSV data for MD rsv_data <- get_nhsn_data(   disease = \"rsv\",   geo_values = \"MD\",   forecast_date = \"2025-10-12\" ) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the hubVerse reference date. — get_reference_date","title":"Get the hubVerse reference date. — get_reference_date","text":"Return date **Saturday follows** forecast date. `reference_date` defined forecast hubs Saturday Following forecast date.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the hubVerse reference date. — get_reference_date","text":"","code":"get_reference_date(forecast_date)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the hubVerse reference date. — get_reference_date","text":"forecast_date vector dates process. Accepts objects coercible `Date`: `Date`, `POSIXct`, character strings unambiguous ISO-like formats (e.g., `\"2025-10-13\"`). See Details time-zone notes `POSIXct`.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the hubVerse reference date. — get_reference_date","text":"`Date` vector length `forecast_date`, giving Saturday   `forecast_date`. `NA` inputs yield `NA` outputs. function fully vectorized.","code":""},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/get_reference_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the hubVerse reference date. — get_reference_date","text":"","code":"# Basic usage get_reference_date(\"2025-10-13\") #> [1] \"2025-10-18\" #> \"2025-10-18\"  # Input is Saturday: strictly after by default get_reference_date(as.Date(\"2025-10-18\")) #> [1] \"2025-10-18\" #> \"2025-10-25\"  # Allow returning the same day if it is Saturday get_reference_date(\"2025-10-18\") #> [1] \"2025-10-18\" #> \"2025-10-18\""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Forecasting Packages — install_forecast_packages","title":"Install Forecasting Packages — install_forecast_packages","text":"function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Forecasting Packages — install_forecast_packages","text":"","code":"install_forecast_packages(   install_delphi = TRUE,   install_hubverse = TRUE,   install_forecasting = TRUE,   install_epi = TRUE,   install_data = TRUE,   install_nowcast = TRUE,   repos = \"https://cloud.r-project.org\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Forecasting Packages — install_forecast_packages","text":"install_delphi Logical. TRUE, installs delphi packages. Default TRUE. install_hubverse Logical. TRUE, installs hubverse packages. Default TRUE. install_forecasting Logical. TRUE, installs forecasting packages (fable, etc.). Default TRUE. install_epi Logical. TRUE, installs epidemiological packages (EpiEstim, EpiNow2). Default TRUE. install_data Logical. TRUE, installs data access packages (epidatr). Default TRUE. repos Character. Repository install packages . Default \"https://cloud.r-project.org\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Forecasting Packages — install_forecast_packages","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/install_forecast_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Forecasting Packages — install_forecast_packages","text":"","code":"if (FALSE) { # \\dontrun{ # Install all packages install_forecast_packages()  # Install only hubverse packages install_forecast_packages(install_forecasting = FALSE,                          install_epi = FALSE,                          install_data = FALSE,                          install_nowcast = FALSE) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read model file helper — read_model_file","title":"Read model file helper — read_model_file","text":"helper picks right reader supports .parquet, .parquet.gz, .csv, .csv.gz","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read model file helper — read_model_file","text":"","code":"read_model_file(path)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read model file helper — read_model_file","text":"path character(1) path file","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/read_model_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read model file helper — read_model_file","text":"","code":"if (FALSE) { # \\dontrun{ read_model_file(\"path/to/file.parquet\") read_model_file(\"path/to/file.csv.gz\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Save Model Output for Forecasting Hub — save_model_output","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"function helps save output forecasting model structured directory format suitable submission forecasting hub. creates necessary directories exist saves forecast output CSV file named forecast date model name.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"","code":"save_model_output(model_name = \"AMPH-SARIMA\", fc_output, forecast_date)"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"model_name Character. Name forecasting model (e.g., \"AMPH-SARIMA\"). fc_output Data frame. Forecast output saved. forecast_date Character. Date forecast \"YYYY-MM-DD\" format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/save_model_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Save Model Output for Forecasting Hub — save_model_output","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up File Structure for a Forecasting Project — setup_file_structure","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages. function helps install necessary packages building infectious disease forecasting pipeline hub, including hubverse packages, fable, EpiEstim, EpiNow2, epidatr, epiforecast packages.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"","code":"setup_file_structure(project_dir = \"AMPH_forecast_project\")  setup_file_structure(project_dir = \"AMPH_forecast_project\")"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"project_dir Character. Directory set project structure. Default \"AMPH_forecast_project\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"NULL (invisibly) NULL (invisibly)","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/setup_file_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Up File Structure for a Forecasting Project — setup_file_structure","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }  if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"Converts output ARX forecasting model (e.g., arx_forecast) required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"","code":"trans_epipredarx_hv(   fc_output = arx_forecast,   model_name = \"AMPH-epipredict-arx\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3 )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"fc_output List. Output ARX forecasting model (e.g., arx_forecast). model_name Character. Name forecasting model. Default \"AMPH-epipredict-arx\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredarx_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Epipredict ARX Output to appropriate hubVerse format — trans_epipredarx_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have ARX forecast output hub_forecast <- trans_epipredarx_hv(fc_output = arx_forecast,                     model_name = \"AMPH-epipredict-arx\",                     target = \"wk inc flu hosp\",                     reference_date = forecast_date + 6,                     horizon_time_steps = 0:3) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"Converts output climatological_forecaster model required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"","code":"trans_epipredclim_hv(   fc_output = climate_forecast,   model_name = \"AMPH-epipredict-climate\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3 )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"fc_output List. output climatological_forecaster model, typically containing 'predictions' data frame. model_name Character. Name forecasting model. Default \"AMPH-epipredict-climate\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format. horizon_time_steps Integer vector. Time steps forecast horizon. Default 0:3 (0 3 weeks ahead).","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_epipredclim_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Epipredict Climate Output to appropriate hubVerse format — trans_epipredclim_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have climate_forecast output from climatological_forecaster hub_format hub_forecast <- trans_epipredclim_hv(fc_output = climate_forecast,                                     model_name = \"AMPH-epipredict-climate\",                                     target = \"wk inc flu hosp\",                                     reference_date = forecast_date + 6,                                     horizon_time_steps = 0:3) } # }"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"Converts output forecasting model `forecast` package required hub format submission forecasting hub.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"","code":"trans_forecastpkg_hv(   fc_output = fc_sarima,   model_name = \"AMPH-sarima\",   target = \"wk inc flu hosp\",   reference_date,   horizon_time_steps = 0:3,   geo_ids = \"md\" )"},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"fc_output Data frame. Output `forecast` package forecasting model. model_name Character. Name forecasting model. Default \"AMPH-epipredict-arx\". target Character. Target variable name. Default \"wk inc flu hosp\". reference_date Date. date forecast reference. \"YYYY-MM-DD\" format. horizon_time_steps Integer vector. Time steps forecast horizon. Default 0:3 (0 3 weeks ahead). geo_ids Character vector. Geographic location identifiers. Default \"md\".","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"tibble. data frame hub format.","code":""},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/reference/trans_forecastpkg_hv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform forecast package Output to appropriate hubVerse format — trans_forecastpkg_hv","text":"","code":"if (FALSE) { # \\dontrun{ library(AMPHForecastSuite) setup_file_structure(project_dir = \"My_Forecast_Project\") # Assuming you have ARX forecast output hub_forecast <- trans_forecastpkg_hv(fc_output = fc_sarima,                    model_name = \"AMPH-sarima\",                    target = \"wk inc flu hosp\",                    reference_date = forecast_date + 6,                    horizon_time_steps = 0:3,                    geo_ids = \"md\")                    } # }"},{"path":[]},{"path":"https://accidda.github.io/AMPH_Forecast_Suite/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"AMPHForecastSuite 0.1.0","text":"Initial release AMPH Forecast Suite package Added install_forecast_packages() function install required forecasting packages Support installing hubverse packages (hubData, hubUtils, hubValidations, hubVis, hubAdmin) Support forecasting packages (fable, fabletools, feasts, tsibble) Support epidemiological packages (EpiEstim, EpiNow2, epipredict) Support data access packages (epidatr)","code":""}]
